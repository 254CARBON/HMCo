# Secrets Rotation Policy and Automation

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: secrets-rotation-policy
  namespace: data-platform
data:
  policy.md: |
    # Secrets Rotation Policy
    
    ## Rotation Schedule
    
    ### Critical Secrets (90 days)
    - Database passwords
    - API keys for external services
    - TLS certificates (before expiry)
    - Cloudflare Tunnel credentials
    
    ### Standard Secrets (180 days)
    - Application secrets
    - JWT signing keys
    - Session encryption keys
    
    ### Long-lived Secrets (365 days)
    - Service account tokens
    - Docker registry credentials
    
    ## Current Secrets Inventory
    
    ```
    data-platform namespace:
    - postgres-shared-secret (database passwords)
    - postgres-workflow-secret (database passwords)
    - minio-secret (object storage credentials)
    - datahub-secret (application secret)
    - superset-secrets (app secret, DB URI)
    - cloudflare-tunnel-credentials (tunnel auth)
    ```
    
    ## Rotation Procedure
    
    1. Generate new secret value
    2. Create new Kubernetes secret (versioned name)
    3. Update deployment to use new secret
    4. Rolling restart deployment
    5. Verify service works with new secret
    6. Delete old secret after 7 days
    
    ## Automation
    
    Future: Use External Secrets Operator with Vault for automatic rotation

---
# CronJob for secrets age monitoring
apiVersion: batch/v1
kind: CronJob
metadata:
  name: check-secrets-age
  namespace: data-platform
spec:
  schedule: "0 9 * * 1"  # Weekly on Monday 9 AM
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: secrets-checker
          restartPolicy: Never
          containers:
          - name: check-age
            image: bitnami/kubectl:latest
            command:
            - /bin/bash
            - -c
            - |
              echo "===== Checking Secrets Age ====="
              echo ""
              
              # Get all secrets and their creation dates
              kubectl get secrets -n data-platform -o json | \
                jq -r '.items[] | select(.type == "Opaque") | 
                "\(.metadata.name)\t\(.metadata.creationTimestamp)"' | \
                while IFS=$'\t' read name created; do
                  age_days=$(( ($(date +%s) - $(date -d "$created" +%s)) / 86400 ))
                  
                  if [ $age_days -gt 180 ]; then
                    echo "⚠️  WARNING: Secret $name is $age_days days old (>180 days)"
                  elif [ $age_days -gt 90 ]; then
                    echo "ℹ️  INFO: Secret $name is $age_days days old (>90 days)"
                  else
                    echo "✓ OK: Secret $name is $age_days days old"
                  fi
                done
              
              echo ""
              echo "Review secrets older than 90 days for rotation"

---
# ServiceAccount for secrets checker
apiVersion: v1
kind: ServiceAccount
metadata:
  name: secrets-checker
  namespace: data-platform

---
# Role for reading secrets metadata (not data)
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secrets-metadata-reader
  namespace: data-platform
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["list", "get"]

---
# RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secrets-checker-binding
  namespace: data-platform
subjects:
- kind: ServiceAccount
  name: secrets-checker
  namespace: data-platform
roleRef:
  kind: Role
  name: secrets-metadata-reader
  apiGroup: rbac.authorization.k8s.io




