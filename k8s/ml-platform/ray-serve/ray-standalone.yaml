## DEPRECATED: Standalone Ray manifests
# This file is retained for reference only.
# The canonical deployment uses the KubeRay Operator with RayCluster/RayService CRDs.
# Do not apply this file in production environments.
---
# Ray Head StatefulSet (legacy example)
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ray-head
  namespace: data-platform
  labels:
    app: ray
    component: head
spec:
  serviceName: ray-head
  replicas: 1
  selector:
    matchLabels:
      app: ray
      component: head
  template:
    metadata:
      labels:
        app: ray
        component: head
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      containers:
      - name: ray-head
        image: rayproject/ray-ml:2.9.0
        command: ["/bin/bash", "-c"]
        args:
        - |
          ray start --head \
            --dashboard-host=0.0.0.0 \
            --port=6379 \
            --dashboard-port=8265 \
            --metrics-export-port=8080 \
            --num-cpus=2 \
            --block
        ports:
        - containerPort: 6379
          name: gcs
        - containerPort: 8265
          name: dashboard
        - containerPort: 10001
          name: client
        - containerPort: 8000
          name: serve
        - containerPort: 8080
          name: metrics
        env:
        - name: RAY_GRAFANA_HOST
          value: "http://kube-prometheus-stack-grafana.monitoring.svc.cluster.local"
        - name: MLFLOW_TRACKING_URI
          value: "http://mlflow.data-platform.svc.cluster.local:5000"
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: minio-credentials
              key: accesskey
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: minio-credentials
              key: secretkey
        - name: MLFLOW_S3_ENDPOINT_URL
          value: "http://minio-service.data-platform.svc.cluster.local:9000"
        resources:
          requests:
            cpu: "1"
            memory: 4Gi
          limits:
            cpu: "3"
            memory: 8Gi
        volumeMounts:
        - name: ray-storage
          mountPath: /tmp/ray
  volumeClaimTemplates:
  - metadata:
      name: ray-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi
---
# Ray Workers Deployment (legacy example)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ray-worker
  namespace: data-platform
  labels:
    app: ray
    component: worker
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ray
      component: worker
  template:
    metadata:
      labels:
        app: ray
        component: worker
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      containers:
      - name: ray-worker
        image: rayproject/ray-ml:2.9.0
        command: ["/bin/bash", "-c"]
        args:
        - |
          until ray health-check --address ray-head.data-platform.svc.cluster.local:6379 2>/dev/null; do
            echo "Waiting for Ray head to be ready..."
            sleep 5
          done
          ray start \
            --address=ray-head.data-platform.svc.cluster.local:6379 \
            --num-cpus=2 \
            --block
        env:
        - name: MLFLOW_TRACKING_URI
          value: "http://mlflow.data-platform.svc.cluster.local:5000"
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: minio-credentials
              key: accesskey
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: minio-credentials
              key: secretkey
        - name: MLFLOW_S3_ENDPOINT_URL
          value: "http://minio-service.data-platform.svc.cluster.local:9000"
        resources:
          requests:
            cpu: "1"
            memory: 4Gi
          limits:
            cpu: "2"
            memory: 8Gi
        volumeMounts:
        - name: ray-logs
          mountPath: /tmp/ray
      volumes:
      - name: ray-logs
        emptyDir: {}
---
# Ray Head Service (legacy example)
apiVersion: v1
kind: Service
metadata:
  name: ray-head
  namespace: data-platform
  labels:
    app: ray
    component: head
spec:
  type: ClusterIP
  clusterIP: None  # Headless for StatefulSet
  selector:
    app: ray
    component: head
  ports:
  - name: gcs
    port: 6379
    targetPort: 6379
  - name: dashboard
    port: 8265
    targetPort: 8265
  - name: client
    port: 10001
    targetPort: 10001
  - name: serve
    port: 8000
    targetPort: 8000
  - name: metrics
    port: 8080
    targetPort: 8080
---
# Ray Serve Service (legacy example)
apiVersion: v1
kind: Service
metadata:
  name: ray-serve
  namespace: data-platform
  labels:
    app: ray
    component: serving
spec:
  type: ClusterIP
  selector:
    app: ray
    component: head
  ports:
  - name: http
    port: 8000
    targetPort: 8000
  - name: dashboard
    port: 8265
    targetPort: 8265
---
# ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: ray-serve
  namespace: data-platform
  labels:
    app: ray
spec:
  selector:
    matchLabels:
      app: ray
  endpoints:
  - port: dashboard
    path: /metrics
    interval: 30s
  - port: metrics
    path: /metrics
    interval: 30s


