---
# Local Storage Provisioner for Bare Metal Kubernetes
# This enables local persistent storage using OpenEBS

apiVersion: v1
kind: Namespace
metadata:
  name: local-storage
  labels:
    name: local-storage

---
# ServiceAccount for local storage provisioner
apiVersion: v1
kind: ServiceAccount
metadata:
  name: local-storage-provisioner
  namespace: local-storage

---
# ClusterRole for local storage provisioner
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: local-storage-provisioner
rules:
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["persistentvolumes"]
  verbs: ["get", "list", "watch", "create", "delete"]
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["get", "list", "watch", "patch", "update"]
- apiGroups: ["storage.k8s.io"]
  resources: ["storageclasses"]
  verbs: ["get", "list", "watch"]

---
# ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: local-storage-provisioner
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: local-storage-provisioner
subjects:
- kind: ServiceAccount
  name: local-storage-provisioner
  namespace: local-storage

---
# Local Storage Class
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: local-storage-standard
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: true
reclaimPolicy: Delete

---
# Example PersistentVolume for each node
# This template should be customized for each node in the cluster
# Run one copy per node with unique name and nodeAffinity

apiVersion: v1
kind: PersistentVolume
metadata:
  name: local-pv-node1-0
  labels:
    node: node1
spec:
  capacity:
    storage: 50Gi
  accessModes:
  - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete
  storageClassName: local-storage-standard
  local:
    path: /mnt/openebs/local
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - k8s-node1

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: local-pv-node2-0
  labels:
    node: node2
spec:
  capacity:
    storage: 50Gi
  accessModes:
  - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete
  storageClassName: local-storage-standard
  local:
    path: /mnt/openebs/local
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - k8s-node2

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: local-pv-node3-0
  labels:
    node: node3
spec:
  capacity:
    storage: 50Gi
  accessModes:
  - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete
  storageClassName: local-storage-standard
  local:
    path: /mnt/openebs/local
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - k8s-node3

---
# ConfigMap for local storage provisioner configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: local-storage-config
  namespace: local-storage
data:
  local-storage-paths.conf: |
    # Local storage configuration for bare metal nodes
    # Update with your node hostnames and storage paths
    
    # Node 1 (Control Plane)
    # Hostname: k8s-node1
    # Storage Path: /mnt/openebs/local
    # Capacity: 50Gi
    
    # Node 2 (Worker)
    # Hostname: k8s-node2
    # Storage Path: /mnt/openebs/local
    # Capacity: 50Gi
    
    # Node 3 (Worker)
    # Hostname: k8s-node3
    # Storage Path: /mnt/openebs/local
    # Capacity: 50Gi

---
# Notes on using this StorageClass:
# 
# 1. Create local storage directories on each node:
#    sudo mkdir -p /mnt/openebs/local
#    sudo chmod 755 /mnt/openebs/local
#
# 2. For dedicated disks, mount them first:
#    sudo mkfs.ext4 /dev/sdX1
#    sudo mount /dev/sdX1 /mnt/openebs/local
#    sudo bash -c 'echo "/dev/sdX1 /mnt/openebs/local ext4 defaults 0 2" >> /etc/fstab'
#
# 3. Create PersistentVolumes for each node/storage path combination
#    (templates provided above - customize node names and capacities)
#
# 4. PVCs will bind to local storage on the same node
#    Use nodeAffinity/nodeSelector to co-locate pods with their storage
#
# 5. Automatic local storage provisioning can be added with:
#    - Local Path Provisioner (https://github.com/rancher/local-path-provisioner)
#    - TopoLVM (https://github.com/topolvm/topolvm)
