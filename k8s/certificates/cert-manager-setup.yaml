# cert-manager setup for automatic TLS certificate management
# Provides automatic certificate provisioning and renewal

---
# Namespace for cert-manager
apiVersion: v1
kind: Namespace
metadata:
  name: cert-manager
  labels:
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/part-of: data-infrastructure

---
# ServiceAccount for cert-manager
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cert-manager
  namespace: cert-manager
  labels:
    app.kubernetes.io/name: cert-manager

---
# ClusterRole for cert-manager
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cert-manager
  labels:
    app.kubernetes.io/name: cert-manager
rules:
- apiGroups:
  - cert-manager.io
  resources:
  - certificates
  - certificaterequests
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cert-manager.io
  resources:
  - issuers
  - clusterissuers
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch

---
# ClusterRoleBinding for cert-manager
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cert-manager
  labels:
    app.kubernetes.io/name: cert-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cert-manager
subjects:
- kind: ServiceAccount
  name: cert-manager
  namespace: cert-manager

---
# cert-manager Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cert-manager
  namespace: cert-manager
  labels:
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/version: v1.13.0
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: cert-manager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: cert-manager
    spec:
      serviceAccountName: cert-manager
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - cert-manager
              topologyKey: kubernetes.io/hostname
      containers:
      - name: cert-manager
        image: quay.io/jetstack/cert-manager-controller:v1.13.0
        imagePullPolicy: IfNotPresent
        args:
        - --cluster-resource-namespace=cert-manager
        - --leader-election-namespace=cert-manager
        - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.13.0
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        ports:
        - containerPort: 9402
          name: tcp-prometheus
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /livez
            port: 9402
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /readyz
            port: 9402
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5

---
# cert-manager webhook Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cert-manager-webhook
  namespace: cert-manager
  labels:
    app.kubernetes.io/name: cert-manager-webhook
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: cert-manager-webhook
  template:
    metadata:
      labels:
        app.kubernetes.io/name: cert-manager-webhook
    spec:
      serviceAccountName: cert-manager
      containers:
      - name: webhook
        image: quay.io/jetstack/cert-manager-webhook:v1.13.0
        imagePullPolicy: IfNotPresent
        args:
        - --secure-port=10250
        - --cert-dir=/tmp/certs
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        ports:
        - containerPort: 10250
          name: https
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /livez
            port: 6060
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /readyz
            port: 6060
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: certs
          mountPath: /tmp/certs
      volumes:
      - name: certs
        emptyDir: {}

---
# Service for cert-manager webhook
apiVersion: v1
kind: Service
metadata:
  name: cert-manager-webhook
  namespace: cert-manager
  labels:
    app.kubernetes.io/name: cert-manager-webhook
spec:
  type: ClusterIP
  ports:
  - port: 443
    targetPort: 10250
    protocol: TCP
    name: https
  selector:
    app.kubernetes.io/name: cert-manager-webhook

---
# Self-signed ClusterIssuer for bootstrapping
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: selfsigned
  labels:
    app.kubernetes.io/name: cert-manager
spec:
  selfSigned: {}

---
# Let's Encrypt Production Issuer (change email to your domain contact)
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
  labels:
    app.kubernetes.io/name: cert-manager
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: admin@example.com
    privateKeySecretRef:
      name: letsencrypt-prod-key
    solvers:
    - http01:
        ingress:
          class: nginx

---
# Let's Encrypt Staging Issuer (for testing)
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-staging
  labels:
    app.kubernetes.io/name: cert-manager
spec:
  acme:
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    email: admin@example.com
    privateKeySecretRef:
      name: letsencrypt-staging-key
    solvers:
    - http01:
        ingress:
          class: nginx
