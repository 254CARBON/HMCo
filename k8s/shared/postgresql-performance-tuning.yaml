---
# PostgreSQL Performance Tuning Configuration
# Optimizes PostgreSQL for metadata and analytical workloads

apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-performance-config
  namespace: data-platform
  labels:
    app: postgres-shared
data:
  postgresql.conf: |
    # Memory configuration
    shared_buffers = 4GB  # 25% of system RAM for DB
    effective_cache_size = 12GB  # 75% of system RAM
    maintenance_work_mem = 1GB
    work_mem = 128MB
    
    # WAL configuration
    wal_buffers = 16MB
    max_wal_size = 4GB
    min_wal_size = 1GB
    checkpoint_completion_target = 0.9
    
    # Query planning
    random_page_cost = 1.1  # SSD optimized
    effective_io_concurrency = 200
    
    # Parallel query execution
    max_worker_processes = 16
    max_parallel_workers_per_gather = 4
    max_parallel_workers = 16
    max_parallel_maintenance_workers = 4
    
    # Connection pooling
    max_connections = 200
    
    # Autovacuum tuning
    autovacuum = on
    autovacuum_max_workers = 4
    autovacuum_naptime = 30s
    autovacuum_vacuum_threshold = 50
    autovacuum_analyze_threshold = 50
    
    # Logging
    log_min_duration_statement = 1000  # Log queries > 1s
    log_line_prefix = '%m [%p] %q%u@%d '
    log_checkpoints = on
    log_connections = off
    log_disconnections = off
    log_lock_waits = on
    log_temp_files = 0
    
    # Statistics
    shared_preload_libraries = 'pg_stat_statements'
    pg_stat_statements.max = 10000
    pg_stat_statements.track = all
    track_activity_query_size = 2048
    track_io_timing = on

---
# PostgreSQL Index Optimization Script
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-index-optimization
  namespace: data-platform
  labels:
    app: postgres-shared
data:
  optimize-indexes.sql: |
    -- DataHub metadata indexes
    CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_metadata_aspect_urn ON metadata_aspect_v2(urn);
    CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_metadata_aspect_aspect ON metadata_aspect_v2(aspect);
    CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_metadata_aspect_lastmodified ON metadata_aspect_v2(lastmodifiedon);
    
    -- DolphinScheduler workflow indexes
    CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_t_ds_process_instance_state ON t_ds_process_instance(state);
    CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_t_ds_task_instance_state ON t_ds_task_instance(state);
    CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_t_ds_task_instance_process ON t_ds_task_instance(process_instance_id);
    
    -- Superset dashboard indexes
    CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_dashboards_published ON dashboards(published);
    CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_slices_datasource ON slices(datasource_id);
    
    -- Analyze tables for query planner
    ANALYZE metadata_aspect_v2;
    ANALYZE t_ds_process_instance;
    ANALYZE t_ds_task_instance;
    ANALYZE dashboards;
    ANALYZE slices;
    
    -- Vacuum and analyze
    VACUUM ANALYZE;

---
# Job to apply PostgreSQL optimizations
apiVersion: batch/v1
kind: Job
metadata:
  name: postgres-optimization-job
  namespace: data-platform
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: postgres-optimizer
        image: postgres:15
        command:
        - /bin/sh
        - -c
        - |
          echo "Applying PostgreSQL optimizations..."
          psql -h postgres-shared-service -U postgres -d datahub < /config/optimize-indexes.sql
          echo "Optimizations applied successfully"
        volumeMounts:
        - name: config
          mountPath: /config
      volumes:
      - name: config
        configMap:
          name: postgres-index-optimization


