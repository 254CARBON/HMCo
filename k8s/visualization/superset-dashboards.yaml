# Superset Dashboards Configuration
# This ConfigMap contains dashboard definitions for importing into Superset
#
# Import these dashboards via Superset UI:
# 1. Access Superset at https://superset.254carbon.com
# 2. Go to Settings > Import Dashboards
# 3. Upload the JSON files from this ConfigMap

apiVersion: v1
kind: ConfigMap
metadata:
  name: superset-dashboard-definitions
  namespace: data-platform
  labels:
    app: superset
    component: dashboards
data:
  # Dashboard 1: Platform Health
  platform-health-dashboard.json: |
    {
      "dashboard_title": "254Carbon Platform Health",
      "description": "Real-time monitoring of platform services, resource utilization, and system health",
      "css": "",
      "slug": "platform-health",
      "position_json": {
        "DASHBOARD_VERSION_KEY": "v2",
        "GRID_ID": {
          "type": "GRID",
          "id": "GRID_ID",
          "children": [
            "ROW-service-status",
            "ROW-resource-metrics",
            "ROW-pod-health"
          ],
          "parents": ["ROOT_ID"]
        },
        "ROW-service-status": {
          "type": "ROW",
          "id": "ROW-service-status",
          "children": [
            "CHART-service-uptime",
            "CHART-pod-count"
          ],
          "meta": {"background": "BACKGROUND_TRANSPARENT"}
        },
        "ROW-resource-metrics": {
          "type": "ROW",
          "id": "ROW-resource-metrics",
          "children": [
            "CHART-cpu-usage",
            "CHART-memory-usage",
            "CHART-disk-usage"
          ],
          "meta": {"background": "BACKGROUND_TRANSPARENT"}
        },
        "ROW-pod-health": {
          "type": "ROW",
          "id": "ROW-pod-health",
          "children": [
            "CHART-pod-restarts",
            "CHART-failed-pods"
          ],
          "meta": {"background": "BACKGROUND_TRANSPARENT"}
        }
      },
      "metadata": {
        "timed_refresh_immune_slices": [],
        "expanded_slices": {},
        "refresh_frequency": 30,
        "default_filters": "{}",
        "color_scheme": "supersetColors"
      },
      "slices": []
    }

  # Dashboard 2: Data Quality
  data-quality-dashboard.json: |
    {
      "dashboard_title": "Data Quality Metrics",
      "description": "Monitor data freshness, quality checks, and schema evolution across data pipelines",
      "css": "",
      "slug": "data-quality",
      "position_json": {
        "DASHBOARD_VERSION_KEY": "v2",
        "GRID_ID": {
          "type": "GRID",
          "id": "GRID_ID",
          "children": [
            "ROW-freshness",
            "ROW-quality-checks",
            "ROW-schema-changes"
          ],
          "parents": ["ROOT_ID"]
        },
        "ROW-freshness": {
          "type": "ROW",
          "id": "ROW-freshness",
          "children": [
            "CHART-data-freshness",
            "CHART-pipeline-status"
          ],
          "meta": {"background": "BACKGROUND_TRANSPARENT"}
        },
        "ROW-quality-checks": {
          "type": "ROW",
          "id": "ROW-quality-checks",
          "children": [
            "CHART-quality-score",
            "CHART-failed-checks",
            "CHART-anomalies"
          ],
          "meta": {"background": "BACKGROUND_TRANSPARENT"}
        },
        "ROW-schema-changes": {
          "type": "ROW",
          "id": "ROW-schema-changes",
          "children": [
            "CHART-schema-evolution",
            "CHART-breaking-changes"
          ],
          "meta": {"background": "BACKGROUND_TRANSPARENT"}
        }
      },
      "metadata": {
        "timed_refresh_immune_slices": [],
        "expanded_slices": {},
        "refresh_frequency": 60,
        "default_filters": "{}",
        "color_scheme": "supersetColors"
      },
      "slices": []
    }

  # Dashboard 3: Business Metrics
  business-metrics-dashboard.json: |
    {
      "dashboard_title": "Business Metrics & KPIs",
      "description": "Custom business KPIs and trend analysis for data-driven decision making",
      "css": "",
      "slug": "business-metrics",
      "position_json": {
        "DASHBOARD_VERSION_KEY": "v2",
        "GRID_ID": {
          "type": "GRID",
          "id": "GRID_ID",
          "children": [
            "ROW-kpis",
            "ROW-trends",
            "ROW-analysis"
          ],
          "parents": ["ROOT_ID"]
        },
        "ROW-kpis": {
          "type": "ROW",
          "id": "ROW-kpis",
          "children": [
            "CHART-key-metrics"
          ],
          "meta": {"background": "BACKGROUND_TRANSPARENT"}
        },
        "ROW-trends": {
          "type": "ROW",
          "id": "ROW-trends",
          "children": [
            "CHART-daily-trends",
            "CHART-weekly-trends"
          ],
          "meta": {"background": "BACKGROUND_TRANSPARENT"}
        },
        "ROW-analysis": {
          "type": "ROW",
          "id": "ROW-analysis",
          "children": [
            "CHART-segment-analysis",
            "CHART-comparison"
          ],
          "meta": {"background": "BACKGROUND_TRANSPARENT"}
        }
      },
      "metadata": {
        "timed_refresh_immune_slices": [],
        "expanded_slices": {},
        "refresh_frequency": 300,
        "default_filters": "{}",
        "color_scheme": "supersetColors"
      },
      "slices": []
    }

---
# Job to configure Superset data sources
apiVersion: batch/v1
kind: Job
metadata:
  name: superset-configure-datasources
  namespace: data-platform
  labels:
    app: superset-config
spec:
  backoffLimit: 3
  ttlSecondsAfterFinished: 600
  template:
    metadata:
      labels:
        app: superset-config
    spec:
      restartPolicy: Never
      containers:
      - name: configure-superset
        image: apache/superset:latest
        command:
        - /bin/bash
        - -c
        - |
          echo "Configuring Superset data sources..."
          
          # Wait for Superset to be ready
          until curl -sf http://superset-web:8088/health; do
            echo "Waiting for Superset..."
            sleep 5
          done
          
          # Initialize Superset if needed
          superset db upgrade
          
          # Create admin user if doesn't exist
          superset fab create-admin \
            --username admin \
            --firstname Admin \
            --lastname User \
            --email admin@254carbon.com \
            --password admin || true
          
          # Initialize roles and permissions
          superset init
          
          echo "Superset configuration complete!"
          echo ""
          echo "Data source configuration:"
          echo "1. PostgreSQL: postgres-shared-service:5432"
          echo "2. Trino: trino-coordinator:8080"
          echo ""
          echo "Login at: https://superset.254carbon.com"
          echo "Username: admin"
          echo "Password: admin"
          echo ""
          echo "IMPORTANT: Change admin password after first login!"
        env:
        - name: SUPERSET_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: superset-secret
              key: secret-key
        - name: DATABASE_DB
          value: "superset"
        - name: DATABASE_HOST
          value: "postgres-shared-service"
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-shared-secret
              key: password
        - name: DATABASE_USER
          value: "superset"
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 500m
            memory: 1Gi




