# DataHub System Update Job
# This job initializes the database schema and Elasticsearch indices
# Run this after fresh deployment or version upgrades

apiVersion: batch/v1
kind: Job
metadata:
  name: datahub-system-update
  namespace: data-platform
  labels:
    app: datahub-system-update
spec:
  backoffLimit: 3
  ttlSecondsAfterFinished: 600
  template:
    metadata:
      labels:
        app: datahub-system-update
    spec:
      restartPolicy: Never
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "1"
      initContainers:
      # Wait for PostgreSQL to be ready
      - name: wait-for-postgres
        image: postgres:14
        command:
        - sh
        - -c
        - |
          until pg_isready -h postgres-shared-service -p 5432 -U datahub; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          echo "PostgreSQL is ready"
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-shared-secret
              key: password
      
      # Wait for Elasticsearch to be ready
      - name: wait-for-elasticsearch
        image: curlimages/curl:latest
        command:
        - sh
        - -c
        - |
          until curl -sf http://elasticsearch-service:9200/_cluster/health?wait_for_status=yellow&timeout=2s; do
            echo "Waiting for Elasticsearch..."
            sleep 2
          done
          echo "Elasticsearch is ready"
      
      # Wait for Kafka to be ready
      - name: wait-for-kafka
        image: confluentinc/cp-kafka:7.4.0
        command:
        - sh
        - -c
        - |
          until /usr/bin/kafka-broker-api-versions --bootstrap-server kafka-service:9092 2>/dev/null | grep -q ApiVersion; do
            echo "Waiting for Kafka..."
            sleep 2
          done
          echo "Kafka is ready"
      
      containers:
      - name: datahub-system-update
        image: acryldata/datahub-upgrade:head
        imagePullPolicy: IfNotPresent
        args:
        - "-u"
        - "SystemUpdate"
        env:
        # PostgreSQL Configuration
        - name: EBEAN_DATASOURCE_HOST
          value: "postgres-shared-service:5432"
        - name: EBEAN_DATASOURCE_URL
          value: "jdbc:postgresql://postgres-shared-service:5432/datahub"
        - name: EBEAN_DATASOURCE_USERNAME
          value: "datahub"
        - name: EBEAN_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-shared-secret
              key: password
        - name: EBEAN_DATASOURCE_DRIVER
          value: "org.postgresql.Driver"
        
        # Kafka Configuration
        - name: KAFKA_BOOTSTRAP_SERVER
          value: "kafka-service:9092"
        - name: KAFKA_SCHEMAREGISTRY_URL
          value: "http://schema-registry-service:8081"
        - name: KAFKA_SCHEMA_REGISTRY_URL
          value: "http://schema-registry-service:8081"
        - name: SCHEMA_REGISTRY_URL
          value: "http://schema-registry-service:8081"
        
        # Elasticsearch Configuration
        - name: ELASTICSEARCH_HOST
          value: "elasticsearch-service"
        - name: ELASTICSEARCH_PORT
          value: "9200"
        - name: ELASTICSEARCH_USE_SSL
          value: "false"
        
        # Neo4j Configuration
        - name: NEO4J_HOST
          value: "graphdb-service:7474"
        - name: NEO4J_URI
          value: "bolt://graphdb-service:7687"
        - name: NEO4J_USERNAME
          value: "neo4j"
        - name: NEO4J_PASSWORD
          value: "datahub_password"
        
        # Entity Registry
        - name: ENTITY_REGISTRY_CONFIG_PATH
          value: "/datahub/datahub-gms/resources/entity-registry.yml"
        
        # GMS Configuration
        - name: DATAHUB_GMS_HOST
          value: "datahub-gms"
        - name: DATAHUB_GMS_PORT
          value: "8080"
        
        # S3/MinIO Configuration
        - name: AWS_REGION
          value: "us-east-1"
        - name: S3_ENDPOINT
          value: "http://minio-service:9000"
        - name: AWS_ENDPOINT_URL
          value: "http://minio-service:9000"
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: minio-secret
              key: access-key
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: minio-secret
              key: secret-key
        
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 500m
            memory: 1Gi




