# Kafka Connect Distributed Cluster
# Provides real-time data ingestion/egress capabilities
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-connect-config
  namespace: data-platform
  labels:
    app: kafka-connect
data:
  connect-distributed.properties: |
    # Kafka Connect Configuration
    bootstrap.servers=kafka-service:9092
    group.id=connect-cluster
    
    # Converter configuration
    key.converter=io.confluent.connect.avro.AvroConverter
    key.converter.schema.registry.url=http://schema-registry-service:8081
    value.converter=io.confluent.connect.avro.AvroConverter
    value.converter.schema.registry.url=http://schema-registry-service:8081
    
    # Internal topics configuration
    config.storage.topic=connect-configs
    config.storage.replication.factor=1
    offset.storage.topic=connect-offsets
    offset.storage.replication.factor=1
    offset.storage.partitions=25
    status.storage.topic=connect-status
    status.storage.replication.factor=1
    status.storage.partitions=5
    
    # REST API
    rest.port=8083
    rest.advertised.host.name=kafka-connect-service
    rest.advertised.port=8083
    
    # Plugin path
    plugin.path=/usr/share/confluent-hub-components,/usr/share/java,/connectors
    
    # Worker configuration
    task.shutdown.graceful.timeout.ms=30000
    offset.flush.interval.ms=10000
    offset.flush.timeout.ms=5000
    
    # Error handling
    errors.retry.timeout=300000
    errors.retry.delay.max.ms=60000
    errors.tolerance=none
    errors.log.enable=true
    errors.log.include.messages=true
    
    # Security
    security.protocol=PLAINTEXT
    
    # Monitoring
    metrics.jmx.enable=true
  
  connect-log4j.properties: |
    log4j.rootLogger=INFO, stdout
    log4j.appender.stdout=org.apache.log4j.ConsoleAppender
    log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
    log4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n
    log4j.logger.org.apache.kafka.connect=INFO
    log4j.logger.org.reflections=ERROR
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-connect-plugins
  namespace: data-platform
  labels:
    app: kafka-connect
data:
  install-connectors.sh: |
    #!/bin/bash
    set -e
    
    echo "Installing Kafka Connect plugins..."
    
    # Install Confluent Hub client
    mkdir -p /usr/share/confluent-hub-components
    
    # Core connectors (will be installed via container image or mounted)
    echo "Connector plugin directory ready at /connectors"
    
    # List installed connectors
    echo "Installed connectors:"
    ls -la /usr/share/confluent-hub-components/ || true
    ls -la /connectors/ || true
    
    echo "Connector installation complete"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-connect
  namespace: data-platform
  labels:
    app: kafka-connect
    component: streaming
spec:
  replicas: 3
  selector:
    matchLabels:
      app: kafka-connect
  template:
    metadata:
      labels:
        app: kafka-connect
        component: streaming
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8083"
        prometheus.io/path: "/metrics"
    spec:
      initContainers:
      - name: wait-for-kafka
        image: busybox:1.35
        command: 
        - sh
        - -c
        - |
          echo "Waiting for Kafka..."
          until nc -z kafka-service 9092; do
            echo "Kafka not ready, waiting..."
            sleep 5
          done
          echo "Kafka is ready!"
          
          echo "Waiting for Schema Registry..."
          until nc -z schema-registry-service 8081; do
            echo "Schema Registry not ready, waiting..."
            sleep 5
          done
          echo "Schema Registry is ready!"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      containers:
      - name: kafka-connect
        image: confluentinc/cp-kafka-connect:7.4.0
        ports:
        - containerPort: 8083
          name: rest-api
        - containerPort: 9999
          name: jmx
        env:
        - name: CONNECT_BOOTSTRAP_SERVERS
          value: "kafka-service:9092"
        - name: CONNECT_REST_ADVERTISED_HOST_NAME
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: CONNECT_GROUP_ID
          value: "connect-cluster"
        - name: CONNECT_CONFIG_STORAGE_TOPIC
          value: "connect-configs"
        - name: CONNECT_OFFSET_STORAGE_TOPIC
          value: "connect-offsets"
        - name: CONNECT_STATUS_STORAGE_TOPIC
          value: "connect-status"
        - name: CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR
          value: "1"
        - name: CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR
          value: "1"
        - name: CONNECT_STATUS_STORAGE_REPLICATION_FACTOR
          value: "1"
        - name: CONNECT_KEY_CONVERTER
          value: "io.confluent.connect.avro.AvroConverter"
        - name: CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL
          value: "http://schema-registry-service:8081"
        - name: CONNECT_VALUE_CONVERTER
          value: "io.confluent.connect.avro.AvroConverter"
        - name: CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL
          value: "http://schema-registry-service:8081"
        - name: CONNECT_PLUGIN_PATH
          value: "/usr/share/java,/usr/share/confluent-hub-components,/connectors"
        - name: CONNECT_LOG4J_ROOT_LOGLEVEL
          value: "INFO"
        - name: KAFKA_HEAP_OPTS
          value: "-Xms2G -Xmx4G"
        - name: KAFKA_JMX_PORT
          value: "9999"
        - name: KAFKA_JMX_HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        volumeMounts:
        - name: connect-config
          mountPath: /etc/kafka-connect
        - name: connector-plugins
          mountPath: /connectors
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /
            port: rest-api
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: rest-api
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
      volumes:
      - name: connect-config
        configMap:
          name: kafka-connect-config
      - name: connector-plugins
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-connect-service
  namespace: data-platform
  labels:
    app: kafka-connect
spec:
  selector:
    app: kafka-connect
  ports:
  - name: rest-api
    port: 8083
    targetPort: 8083
  - name: jmx
    port: 9999
    targetPort: 9999
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-connect-headless
  namespace: data-platform
  labels:
    app: kafka-connect
spec:
  clusterIP: None
  selector:
    app: kafka-connect
  ports:
  - name: rest-api
    port: 8083
    targetPort: 8083

