apiVersion: v1
kind: ConfigMap
metadata:
  name: debezium-postgres-connector
  namespace: data-platform
  labels:
    app: kafka-connect
    connector: debezium-postgres
data:
  connector-config.json: |
    {
      "name": "postgres-cdc-connector",
      "config": {
        "connector.class": "io.debezium.connector.postgresql.PostgresConnector",
        "tasks.max": "1",
        "database.hostname": "postgres-shared-service",
        "database.port": "5432",
        "database.user": "postgres",
        "database.password": "postgres",
        "database.dbname": "datahub",
        "database.server.name": "254carbon",
        "table.include.list": "public.commodity_prices,public.economic_indicators,public.ml_models,public.feature_values",
        "plugin.name": "pgoutput",
        "publication.name": "dbz_publication",
        "slot.name": "debezium_slot",
        "heartbeat.interval.ms": "10000",
        "heartbeat.topics.prefix": "__debezium-heartbeat",
        "snapshot.mode": "initial",
        "decimal.handling.mode": "double",
        "time.precision.mode": "adaptive_time_microseconds",
        "tombstones.on.delete": "true",
        "transforms": "route,unwrap",
        "transforms.route.type": "org.apache.kafka.connect.transforms.RegexRouter",
        "transforms.route.regex": "([^.]+)\\.([^.]+)\\.([^.]+)",
        "transforms.route.replacement": "cdc.$3",
        "transforms.unwrap.type": "io.debezium.transforms.ExtractNewRecordState",
        "transforms.unwrap.drop.tombstones": "false",
        "transforms.unwrap.delete.handling.mode": "rewrite",
        "transforms.unwrap.add.fields": "op,source.ts_ms,source.db,source.table",
        "key.converter": "org.apache.kafka.connect.json.JsonConverter",
        "key.converter.schemas.enable": "false",
        "value.converter": "org.apache.kafka.connect.json.JsonConverter",
        "value.converter.schemas.enable": "false",
        "topic.creation.default.replication.factor": "3",
        "topic.creation.default.partitions": "6",
        "topic.creation.default.cleanup.policy": "delete",
        "topic.creation.default.retention.ms": "604800000"
      }
    }
---
apiVersion: batch/v1
kind: Job
metadata:
  name: debezium-postgres-setup
  namespace: data-platform
  labels:
    app: debezium
    component: setup
spec:
  ttlSecondsAfterFinished: 86400
  template:
    metadata:
      labels:
        app: debezium
        component: setup-job
    spec:
      restartPolicy: OnFailure
      containers:
      - name: postgres-setup
        image: postgres:15
        command:
        - /bin/bash
        - -c
        - |
          set -e
          echo "Setting up PostgreSQL for Debezium CDC..."
          
          # Enable logical replication
          PGPASSWORD=postgres psql -h postgres-shared-service -U postgres -d datahub <<EOF
          -- Create publication for Debezium
          DO \$\$
          BEGIN
            IF NOT EXISTS (SELECT 1 FROM pg_publication WHERE pubname = 'dbz_publication') THEN
              CREATE PUBLICATION dbz_publication FOR ALL TABLES;
            END IF;
          END
          \$\$;
          
          -- Create replication slot
          SELECT pg_create_logical_replication_slot('debezium_slot', 'pgoutput');
          
          -- Grant necessary permissions
          GRANT SELECT ON ALL TABLES IN SCHEMA public TO postgres;
          GRANT USAGE ON SCHEMA public TO postgres;
          
          -- Create tables if they don't exist (for CDC)
          CREATE TABLE IF NOT EXISTS commodity_prices (
            id SERIAL PRIMARY KEY,
            commodity_code VARCHAR(50),
            price DECIMAL(18,6),
            currency VARCHAR(3),
            timestamp TIMESTAMPTZ DEFAULT NOW(),
            source VARCHAR(50),
            created_at TIMESTAMPTZ DEFAULT NOW(),
            updated_at TIMESTAMPTZ DEFAULT NOW()
          );
          
          CREATE TABLE IF NOT EXISTS economic_indicators (
            id SERIAL PRIMARY KEY,
            indicator_name VARCHAR(100),
            value DECIMAL(18,6),
            period VARCHAR(20),
            country VARCHAR(3),
            timestamp TIMESTAMPTZ DEFAULT NOW(),
            created_at TIMESTAMPTZ DEFAULT NOW(),
            updated_at TIMESTAMPTZ DEFAULT NOW()
          );
          
          CREATE TABLE IF NOT EXISTS ml_models (
            id SERIAL PRIMARY KEY,
            model_name VARCHAR(200),
            model_version VARCHAR(50),
            status VARCHAR(50),
            accuracy DECIMAL(5,4),
            deployed_at TIMESTAMPTZ,
            created_at TIMESTAMPTZ DEFAULT NOW(),
            updated_at TIMESTAMPTZ DEFAULT NOW()
          );
          
          CREATE TABLE IF NOT EXISTS feature_values (
            id SERIAL PRIMARY KEY,
            feature_name VARCHAR(200),
            entity_id VARCHAR(100),
            feature_value JSONB,
            timestamp TIMESTAMPTZ DEFAULT NOW(),
            created_at TIMESTAMPTZ DEFAULT NOW(),
            updated_at TIMESTAMPTZ DEFAULT NOW()
          );
          
          -- Create update trigger function
          CREATE OR REPLACE FUNCTION update_updated_at_column()
          RETURNS TRIGGER AS \$\$
          BEGIN
            NEW.updated_at = NOW();
            RETURN NEW;
          END;
          \$\$ language 'plpgsql';
          
          -- Add update triggers
          DROP TRIGGER IF EXISTS update_commodity_prices_updated_at ON commodity_prices;
          CREATE TRIGGER update_commodity_prices_updated_at BEFORE UPDATE ON commodity_prices
            FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
          
          DROP TRIGGER IF EXISTS update_economic_indicators_updated_at ON economic_indicators;
          CREATE TRIGGER update_economic_indicators_updated_at BEFORE UPDATE ON economic_indicators
            FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
          
          DROP TRIGGER IF EXISTS update_ml_models_updated_at ON ml_models;
          CREATE TRIGGER update_ml_models_updated_at BEFORE UPDATE ON ml_models
            FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
          
          DROP TRIGGER IF EXISTS update_feature_values_updated_at ON feature_values;
          CREATE TRIGGER update_feature_values_updated_at BEFORE UPDATE ON feature_values
            FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
          
          EOF
          
          echo "PostgreSQL setup for CDC completed successfully"
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi



