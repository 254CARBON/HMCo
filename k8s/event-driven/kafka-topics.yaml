# Kafka Topics for Event-Driven Architecture
# Domain-specific topics with proper configuration

---
# Data Events Topics

# Data ingestion events
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-topic-data-ingestion
  namespace: data-platform
  labels:
    app: kafka
    topic-type: data-events
data:
  topic.name: "data-ingestion"
  partitions: "12"
  replication.factor: "3"
  min.insync.replicas: "2"
  retention.ms: "604800000"  # 7 days
  compression.type: "lz4"
  cleanup.policy: "delete"

---
# Data quality check results
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-topic-data-quality
  namespace: data-platform
  labels:
    app: kafka
    topic-type: data-events
data:
  topic.name: "data-quality"
  partitions: "6"
  replication.factor: "3"
  min.insync.replicas: "2"
  retention.ms: "2592000000"  # 30 days
  compression.type: "lz4"
  cleanup.policy: "delete"

---
# Data lineage updates
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-topic-data-lineage
  namespace: data-platform
  labels:
    app: kafka
    topic-type: data-events
data:
  topic.name: "data-lineage"
  partitions: "3"
  replication.factor: "3"
  min.insync.replicas: "2"
  retention.ms: "7776000000"  # 90 days
  compression.type: "lz4"
  cleanup.policy: "compact"  # Keep latest lineage

---
# Data transformation events
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-topic-data-transformation
  namespace: data-platform
  labels:
    app: kafka
    topic-type: data-events
data:
  topic.name: "data-transformation"
  partitions: "6"
  replication.factor: "3"
  min.insync.replicas: "2"
  retention.ms: "604800000"  # 7 days
  compression.type: "lz4"
  cleanup.policy: "delete"

---
# System Events Topics

# Service health status
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-topic-system-health
  namespace: data-platform
  labels:
    app: kafka
    topic-type: system-events
data:
  topic.name: "system-health"
  partitions: "3"
  replication.factor: "3"
  min.insync.replicas: "2"
  retention.ms: "604800000"  # 7 days
  compression.type: "lz4"
  cleanup.policy: "compact"  # Keep latest health status

---
# Deployment events
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-topic-deployment-events
  namespace: data-platform
  labels:
    app: kafka
    topic-type: system-events
data:
  topic.name: "deployment-events"
  partitions: "3"
  replication.factor: "3"
  min.insync.replicas: "2"
  retention.ms: "7776000000"  # 90 days
  compression.type: "lz4"
  cleanup.policy: "delete"

---
# Configuration changes
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-topic-config-changes
  namespace: data-platform
  labels:
    app: kafka
    topic-type: system-events
data:
  topic.name: "config-changes"
  partitions: "3"
  replication.factor: "3"
  min.insync.replicas: "2"
  retention.ms: "31536000000"  # 365 days
  compression.type: "lz4"
  cleanup.policy: "compact"  # Keep latest config

---
# Security events
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-topic-security-events
  namespace: data-platform
  labels:
    app: kafka
    topic-type: system-events
data:
  topic.name: "security-events"
  partitions: "6"
  replication.factor: "3"
  min.insync.replicas: "2"
  retention.ms: "31536000000"  # 365 days
  compression.type: "lz4"
  cleanup.policy: "delete"

---
# Audit Events Topics

# User actions
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-topic-audit-user-actions
  namespace: data-platform
  labels:
    app: kafka
    topic-type: audit-events
data:
  topic.name: "audit-user-actions"
  partitions: "12"
  replication.factor: "3"
  min.insync.replicas: "2"
  retention.ms: "31536000000"  # 365 days
  compression.type: "lz4"
  cleanup.policy: "delete"

---
# API calls
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-topic-audit-api-calls
  namespace: data-platform
  labels:
    app: kafka
    topic-type: audit-events
data:
  topic.name: "audit-api-calls"
  partitions: "12"
  replication.factor: "3"
  min.insync.replicas: "2"
  retention.ms: "2592000000"  # 30 days
  compression.type: "lz4"
  cleanup.policy: "delete"

---
# Data access patterns
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-topic-audit-data-access
  namespace: data-platform
  labels:
    app: kafka
    topic-type: audit-events
data:
  topic.name: "audit-data-access"
  partitions: "12"
  replication.factor: "3"
  min.insync.replicas: "2"
  retention.ms: "7776000000"  # 90 days
  compression.type: "lz4"
  cleanup.policy: "delete"

---
# Admin operations
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-topic-audit-admin-ops
  namespace: data-platform
  labels:
    app: kafka
    topic-type: audit-events
data:
  topic.name: "audit-admin-operations"
  partitions: "3"
  replication.factor: "3"
  min.insync.replicas: "2"
  retention.ms: "31536000000"  # 365 days
  compression.type: "lz4"
  cleanup.policy: "delete"

---
# Job to create all topics
apiVersion: batch/v1
kind: Job
metadata:
  name: kafka-topics-creator
  namespace: data-platform
  labels:
    app: kafka
    component: setup
spec:
  template:
    metadata:
      labels:
        app: kafka-topics-creator
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      restartPolicy: OnFailure
      containers:
      - name: kafka-topics
        image: confluentinc/cp-kafka:7.4.0
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        command:
        - /bin/bash
        - -c
        - |
          set -e
          
          # Wait for Kafka to be ready
          echo "Waiting for Kafka..."
          until kafka-broker-api-versions --bootstrap-server kafka-service:9092 > /dev/null 2>&1; do
            sleep 2
          done
          echo "Kafka is ready"
          
          # Function to create topic if it doesn't exist
          create_topic() {
            local name=$1
            local partitions=$2
            local replication=$3
            local retention=$4
            local compression=$5
            local cleanup=$6
            
            if kafka-topics --bootstrap-server kafka-service:9092 --list | grep -q "^${name}$"; then
              echo "Topic ${name} already exists"
            else
              echo "Creating topic ${name}..."
              kafka-topics --bootstrap-server kafka-service:9092 \
                --create \
                --topic ${name} \
                --partitions ${partitions} \
                --replication-factor ${replication} \
                --config retention.ms=${retention} \
                --config compression.type=${compression} \
                --config cleanup.policy=${cleanup} \
                --config min.insync.replicas=1
              echo "Created topic ${name}"
            fi
          }
          
          # Create data events topics (replication factor 1 for single broker)
          create_topic "data-ingestion" 12 1 604800000 "lz4" "delete"
          create_topic "data-quality" 6 1 2592000000 "lz4" "delete"
          create_topic "data-lineage" 3 1 7776000000 "lz4" "compact"
          create_topic "data-transformation" 6 1 604800000 "lz4" "delete"
          
          # Create system events topics (replication factor 1 for single broker)
          create_topic "system-health" 3 1 604800000 "lz4" "compact"
          create_topic "deployment-events" 3 1 7776000000 "lz4" "delete"
          create_topic "config-changes" 3 1 31536000000 "lz4" "compact"
          create_topic "security-events" 6 1 31536000000 "lz4" "delete"
          
          # Create audit events topics (replication factor 1 for single broker)
          create_topic "audit-user-actions" 12 1 31536000000 "lz4" "delete"
          create_topic "audit-api-calls" 12 1 2592000000 "lz4" "delete"
          create_topic "audit-data-access" 12 1 7776000000 "lz4" "delete"
          create_topic "audit-admin-operations" 3 1 31536000000 "lz4" "delete"
          
          echo "All topics created successfully"
          
          # List all topics
          echo "Current topics:"
          kafka-topics --bootstrap-server kafka-service:9092 --list

