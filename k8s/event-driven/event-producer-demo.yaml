# Event Producer Demonstration Job
# Tests event production to all Kafka topics

apiVersion: batch/v1
kind: Job
metadata:
  name: event-producer-demo
  namespace: data-platform
  labels:
    app: event-producer-demo
spec:
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      restartPolicy: OnFailure
      containers:
      - name: producer
        image: python:3.11-slim
        command:
        - /bin/bash
        - -c
        - |
          pip install confluent-kafka==2.3.0 > /dev/null 2>&1
          
          python3 << 'PYTHON_EOF'
          import json
          import uuid
          import time
          from confluent_kafka import Producer
          
          print("═══════════════════════════════════════════════════")
          print("254Carbon Event Producer Demo")
          print("═══════════════════════════════════════════════════")
          print()
          
          # Initialize producer
          producer = Producer({
              'bootstrap.servers': 'kafka-service.data-platform.svc.cluster.local:9092',
              'client.id': 'event-producer-demo',
              'compression.type': 'lz4',
              'linger.ms': 10
          })
          
          print("✅ Connected to Kafka")
          print()
          
          # Helper function
          def create_event(event_type, **kwargs):
              return {
                  'eventId': str(uuid.uuid4()),
                  'eventType': event_type,
                  'timestamp': int(time.time() * 1000),
                  'source': 'event-producer-demo',
                  'version': '1.0.0',
                  **kwargs
              }
          
          delivery_count = 0
          
          def delivery_callback(err, msg):
              global delivery_count
              if err:
                  print(f"❌ Delivery failed: {err}")
              else:
                  delivery_count += 1
          
          print("Producing test events...")
          print()
          
          # 1. Data Ingestion Event
          event = create_event(
              'DataIngestionEvent',
              datasetName='test_commodity_prices',
              recordCount=1000,
              sizeBytes=50000,
              format='parquet',
              location='s3://test-bucket/data.parquet',
              status='SUCCESS',
              metadata={}
          )
          producer.produce(
              topic='data-ingestion',
              key='test_commodity_prices',
              value=json.dumps(event).encode('utf-8'),
              on_delivery=delivery_callback
          )
          print("✅ Produced: Data Ingestion Event")
          
          # 2. Service Health Event
          event = create_event(
              'ServiceHealthEvent',
              serviceName='demo-service',
              namespace='data-platform',
              healthStatus='HEALTHY',
              latencyMs=25,
              errorRate=0.001,
              message='Service is healthy'
          )
          producer.produce(
              topic='system-health',
              key='demo-service',
              value=json.dumps(event).encode('utf-8'),
              on_delivery=delivery_callback
          )
          print("✅ Produced: Service Health Event")
          
          # 3. Data Quality Event
          event = create_event(
              'DataQualityEvent',
              datasetName='test_commodity_prices',
              checkType='completeness',
              checkName='null_check',
              result='PASS',
              score=0.99,
              failedRecords=10,
              totalRecords=1000,
              message='Quality check passed'
          )
          producer.produce(
              topic='data-quality',
              key='test_commodity_prices',
              value=json.dumps(event).encode('utf-8'),
              on_delivery=delivery_callback
          )
          print("✅ Produced: Data Quality Event")
          
          # 4. API Call Audit Event
          event = create_event(
              'AuditAPICallEvent',
              service='demo-service',
              endpoint='/api/test',
              method='GET',
              statusCode=200,
              latencyMs=50,
              requestSizeBytes=256,
              responseSizeBytes=2048,
              userId='user-123',
              ipAddress='10.0.1.100',
              errorMessage=None
          )
          producer.produce(
              topic='audit-api-calls',
              key='demo-service',
              value=json.dumps(event).encode('utf-8'),
              on_delivery=delivery_callback
          )
          print("✅ Produced: API Call Audit Event")
          
          # 5. User Action Event
          event = create_event(
              'AuditUserActionEvent',
              userId='user-123',
              username='demo@254carbon.com',
              action='VIEW_DASHBOARD',
              resource='commodity-dashboard',
              resourceType='dashboard',
              result='SUCCESS',
              ipAddress='10.0.1.100',
              userAgent='Mozilla/5.0',
              details={}
          )
          producer.produce(
              topic='audit-user-actions',
              key='user-123',
              value=json.dumps(event).encode('utf-8'),
              on_delivery=delivery_callback
          )
          print("✅ Produced: User Action Event")
          
          # 6. Deployment Event
          event = create_event(
              'DeploymentEvent',
              deploymentName='demo-service',
              namespace='data-platform',
              action='DEPLOY',
              version='v1.2.0',
              previousVersion='v1.1.0',
              replicas=3,
              deployedBy='platform-team'
          )
          producer.produce(
              topic='deployment-events',
              key='demo-service',
              value=json.dumps(event).encode('utf-8'),
              on_delivery=delivery_callback
          )
          print("✅ Produced: Deployment Event")
          
          # Flush and wait for delivery
          producer.flush(timeout=10)
          
          print()
          print(f"═══════════════════════════════════════════════════")
          print(f"✅ Successfully delivered {delivery_count} events!")
          print(f"═══════════════════════════════════════════════════")
          print()
          print("Events were produced to:")
          print("  • data-ingestion")
          print("  • data-quality")
          print("  • system-health")
          print("  • audit-api-calls")
          print("  • audit-user-actions")
          print("  • deployment-events")
          print()
          print("Verify events with:")
          print("  kubectl exec kafka-0 -n data-platform -- \\")
          print("    kafka-console-consumer --bootstrap-server kafka-service:9092 \\")
          print("    --topic data-ingestion --from-beginning --max-messages 1")
          
          PYTHON_EOF
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi



