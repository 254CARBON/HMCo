# SeaTunnel deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: seatunnel
  namespace: data-platform
  labels:
    app: seatunnel
    component: data-integration
spec:
  replicas: 1
  selector:
    matchLabels:
      app: seatunnel
  template:
    metadata:
      labels:
        app: seatunnel
        component: data-integration
    spec:
      imagePullSecrets: []
      containers:
      - name: seatunnel
        image: apache/seatunnel:2.3.3
        ports:
        - containerPort: 5801
          name: seatunnel-rest
        - containerPort: 8080
          name: seatunnel-ui
        env:
        - name: SEATUNNEL_HOME
          value: "/opt/seatunnel"
        - name: JAVA_OPTS
          value: "-Xms1g -Xmx2g"
        - name: SEATUNNEL_DATABASE_URL
          value: "jdbc:mysql://mysql-seatunnel-service:3306/seatunnel"
        - name: SEATUNNEL_DATABASE_USERNAME
          value: "seatunnel"
        - name: SEATUNNEL_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-seatunnel-secret
              key: user-password
        - name: SEATUNNEL_DATABASE_DRIVER
          value: "com.mysql.cj.jdbc.Driver"
        - name: SEATUNNEL_ENGINE_TYPE
          value: "seatunnel"
        - name: SEATUNNEL_PLUGIN_DIR
          value: "/opt/seatunnel/connectors"
        volumeMounts:
        - name: seatunnel-config
          mountPath: /opt/seatunnel/config
        - name: seatunnel-connectors
          mountPath: /opt/seatunnel/connectors
        - name: seatunnel-logs
          mountPath: /opt/seatunnel/logs
        resources:
          limits:
            memory: "2Gi"
            cpu: "1000m"
          requests:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /seatunnel/api/v1/system/info
            port: 5801
            scheme: HTTP
          initialDelaySeconds: 120
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /seatunnel/api/v1/system/info
            port: 5801
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: seatunnel-config
        configMap:
          name: seatunnel-config
      - name: seatunnel-connectors
        configMap:
          name: seatunnel-connectors
      - name: seatunnel-logs
        emptyDir: {}
---
# SeaTunnel Service
apiVersion: v1
kind: Service
metadata:
  name: seatunnel-service
  namespace: data-platform
  labels:
    app: seatunnel
spec:
  ports:
  - port: 5801
    targetPort: 5801
    name: seatunnel-rest
  - port: 8080
    targetPort: 8080
    name: seatunnel-ui
  selector:
    app: seatunnel
  type: ClusterIP

---
# ConfigMap for SeaTunnel configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: seatunnel-config
  namespace: data-platform
  labels:
    app: seatunnel
data:
  application.yml: |
    seatunnel:
      engine:
        type: seatunnel
        backup-count: 1
        queue-type: blockingqueue
        print-jvm-info: true
        slot-service:
          dynamic-slot: true
          max-slot: 20
          min-slot: 1
        checkpoint:
          interval: 10000
          timeout: 60000
          storage:
            type: hdfs
            max-retained-checkpoints: 3
        jar-storage:
          enable: false
          filesystem:
            type: hdfs
    database:
      datasource:
        hikari:
          connection-timeout: 30000
          idle-timeout: 600000
          max-lifetime: 1800000
          maximum-pool-size: 20
          minimum-idle: 5
          pool-name: "SeaTunnel-HikariPool"

  logback.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <configuration scan="true" scanPeriod="30 seconds">
        <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
            <encoder>
                <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
            </encoder>
        </appender>
        <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <file>/opt/seatunnel/logs/seatunnel.log</file>
            <encoder>
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
            </encoder>
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <fileNamePattern>/opt/seatunnel/logs/seatunnel.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
                <maxFileSize>100MB</maxFileSize>
                <maxHistory>30</maxHistory>
                <totalSizeCap>1GB</totalSizeCap>
            </rollingPolicy>
        </appender>
        <root level="INFO">
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="FILE"/>
        </root>
    </configuration>

---
# ConfigMap for SeaTunnel connectors
apiVersion: v1
kind: ConfigMap
metadata:
  name: seatunnel-connectors
  namespace: data-platform
  labels:
    app: seatunnel
data:
  # Connector configurations for common data sources
  kafka-source.json: |
    {
      "plugin_name": "kafka",
      "result_table_name": "kafka_source",
      "schema": {
        "fields": {
          "id": "INT",
          "name": "STRING",
          "timestamp": "TIMESTAMP",
          "partition": "STRING"
        }
      },
      "source": {
        "bootstrap.servers": "kafka-service:9092",
        "topics": "input-topic",
        "group.id": "seatunnel-kafka-group",
        "auto.offset.reset": "latest"
      }
    }

  mysql-sink.json: |
    {
      "plugin_name": "jdbc",
      "result_table_name": "mysql_sink",
      "schema": {
        "fields": {
          "id": "INT",
          "name": "STRING",
          "timestamp": "TIMESTAMP"
        }
      },
      "sink": {
        "jdbc_url": "jdbc:mysql://mysql-seatunnel-service:3306/seatunnel",
        "driver": "com.mysql.cj.jdbc.Driver",
        "user": "seatunnel",
        "password": "seatunnel_password",
        "query": "INSERT INTO processed_data (id, name, timestamp) VALUES (?, ?, ?)"
      }
    }

  s3-sink.json: |
    {
      "plugin_name": "s3",
      "result_table_name": "s3_sink",
      "schema": {
        "fields": {
          "data": "STRING"
        }
      },
      "sink": {
        "bucket": "seatunnel-output",
        "key": "output/{{now | format('yyyy-MM-dd')}}/data-{{uuid}}.json",
        "endpoint": "http://minio-service:9000",
        "access_key": "minioadmin",
        "secret_key": "minioadmin123",
        "format": "json"
      }
    }

  # Iceberg source connector configuration
  iceberg-source.json: |
    {
      "plugin_name": "iceberg",
      "result_table_name": "iceberg_source",
      "schema": {
        "fields": {
          "id": "BIGINT",
          "name": "STRING",
          "email": "STRING",
          "created_at": "TIMESTAMP"
        }
      },
      "source": {
        "catalog_name": "rest",
        "catalog_type": "rest",
        "warehouse": "s3://iceberg-warehouse/",
        "uri": "http://iceberg-rest-catalog:8181",
        "database": "default",
        "table": "customers",
        "s3.access-key-id": "minioadmin",
        "s3.secret-access-key": "minioadmin123",
        "s3.region": "us-east-1",
        "s3.endpoint": "http://minio-service:9000"
      }
    }

  # Iceberg sink connector configuration
  iceberg-sink.json: |
    {
      "plugin_name": "iceberg",
      "result_table_name": "iceberg_sink",
      "schema": {
        "fields": {
          "id": "BIGINT",
          "name": "STRING",
          "email": "STRING",
          "created_at": "TIMESTAMP"
        }
      },
      "sink": {
        "catalog_name": "rest",
        "catalog_type": "rest",
        "warehouse": "s3://iceberg-warehouse/",
        "uri": "http://iceberg-rest-catalog:8181",
        "database": "raw",
        "table": "customer_events",
        "s3.access-key-id": "minioadmin",
        "s3.secret-access-key": "minioadmin123",
        "s3.region": "us-east-1",
        "s3.endpoint": "http://minio-service:9000"
      }
    }
