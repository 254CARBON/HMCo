# DolphinScheduler Database Initialization Job
# This creates all required database tables and initial data

apiVersion: v1
kind: ConfigMap
metadata:
  name: dolphinscheduler-init-sql
  namespace: data-platform
data:
  init-schema.sql: |
    -- DolphinScheduler database schema initialization
    -- Version 3.2.x compatible
    
    CREATE TABLE IF NOT EXISTS t_ds_plugin_define (
      id serial NOT NULL,
      plugin_name varchar(100) NOT NULL,
      plugin_type varchar(100) NOT NULL,
      plugin_params text,
      create_time timestamp NULL,
      update_time timestamp NULL,
      CONSTRAINT t_ds_plugin_define_pk PRIMARY KEY (id),
      CONSTRAINT t_ds_plugin_define_un UNIQUE (plugin_name,plugin_type)
    );

    CREATE TABLE IF NOT EXISTS t_ds_alertgroup (
      id serial NOT NULL,
      alert_instance_ids varchar(255) NULL,
      create_user_id int4 NULL,
      group_name varchar(255) NULL,
      description varchar(255) NULL,
      create_time timestamp NULL,
      update_time timestamp NULL,
      CONSTRAINT t_ds_alertgroup_pk PRIMARY KEY (id),
      CONSTRAINT t_ds_alertgroup_name_un UNIQUE (group_name)
    );

    CREATE TABLE IF NOT EXISTS t_ds_worker_group (
      id serial NOT NULL,
      name varchar(255) NOT NULL,
      addr_list text NULL,
      create_time timestamp NULL,
      update_time timestamp NULL,
      description varchar(255) NULL,
      other_params_json text NULL,
      CONSTRAINT t_ds_worker_group_pk PRIMARY KEY (id),
      CONSTRAINT t_ds_worker_group_name_unique UNIQUE (name)
    );

    CREATE TABLE IF NOT EXISTS t_ds_environment (
      id serial NOT NULL,
      code int8 NOT NULL,
      name varchar(100) NOT NULL,
      config text NULL,
      description text NULL,
      operator int4 NULL,
      create_time timestamp NULL,
      update_time timestamp NULL,
      CONSTRAINT t_ds_environment_pk PRIMARY KEY (id),
      CONSTRAINT t_ds_environment_code_un UNIQUE (code),
      CONSTRAINT t_ds_environment_name_unique UNIQUE (name)
    );

    CREATE TABLE IF NOT EXISTS t_ds_environment_worker_group_relation (
      id serial NOT NULL,
      environment_code int8 NOT NULL,
      worker_group varchar(255) NOT NULL,
      operator int4 NULL,
      create_time timestamp NULL,
      update_time timestamp NULL,
      CONSTRAINT t_ds_environment_worker_group_pk PRIMARY KEY (id),
      CONSTRAINT t_ds_environment_worker_unique UNIQUE (environment_code,worker_group)
    );

    -- Insert default worker group
    INSERT INTO t_ds_worker_group (name, addr_list, create_time, update_time, description)
    VALUES ('default', NULL, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'Default worker group')
    ON CONFLICT (name) DO NOTHING;

    -- Insert default alert group
    INSERT INTO t_ds_alertgroup (alert_instance_ids, create_user_id, group_name, description, create_time, update_time)
    VALUES ('', 1, 'default admin warning group', 'default admin warning group', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
    ON CONFLICT (group_name) DO NOTHING;

    -- Insert default environment
    INSERT INTO t_ds_environment (code, name, config, description, operator, create_time, update_time)
    VALUES (1, 'default', '', 'default environment', 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
    ON CONFLICT (code) DO NOTHING;

---
apiVersion: batch/v1
kind: Job
metadata:
  name: dolphinscheduler-init-db
  namespace: data-platform
  labels:
    app: dolphinscheduler-init-db
spec:
  backoffLimit: 3
  ttlSecondsAfterFinished: 600
  template:
    metadata:
      labels:
        app: dolphinscheduler-init-db
    spec:
      restartPolicy: Never
      initContainers:
      - name: wait-for-postgres
        image: postgres:14
        command:
        - sh
        - -c
        - |
          until pg_isready -h postgres-workflow-service -p 5432 -U dolphinscheduler; do
            echo "Waiting for PostgreSQL workflow database..."
            sleep 2
          done
          echo "PostgreSQL is ready"
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-workflow-secret
              key: password
      
      containers:
      - name: init-db
        image: postgres:14
        command:
        - sh
        - -c
        - |
          echo "Starting DolphinScheduler database initialization..."
          psql -h postgres-workflow-service -U dolphinscheduler -d dolphinscheduler -f /init-sql/init-schema.sql
          if [ $? -eq 0 ]; then
            echo "Database initialization completed successfully"
          else
            echo "Database initialization failed"
            exit 1
          fi
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-workflow-secret
              key: password
        volumeMounts:
        - name: init-sql
          mountPath: /init-sql
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
      
      volumes:
      - name: init-sql
        configMap:
          name: dolphinscheduler-init-sql

