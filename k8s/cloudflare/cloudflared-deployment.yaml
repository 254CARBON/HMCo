apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloudflared
  namespace: cloudflare-tunnel
  labels:
    app.kubernetes.io/name: cloudflare-tunnel
    app.kubernetes.io/component: tunnel
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: cloudflare-tunnel
  template:
    metadata:
      labels:
        app.kubernetes.io/name: cloudflare-tunnel
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "2000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: cloudflared
      restartPolicy: Always
      
      # Anti-affinity to spread replicas across nodes
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - cloudflare-tunnel
              topologyKey: kubernetes.io/hostname
      
      containers:
      - name: cloudflared
        image: cloudflare/cloudflared:latest
        imagePullPolicy: Always
        
        # Run cloudflared with tunnel token (remote config)
        command:
        - cloudflared
        args:
        - tunnel
        - --no-autoupdate
        - run
        - --token
        - $(TUNNEL_TOKEN)
        
        env:
        - name: TZ
          value: UTC
        - name: TUNNEL_TOKEN
          valueFrom:
            secretKeyRef:
              name: cloudflare-tunnel-token
              key: token
        - name: TUNNEL_LOGLEVEL
          value: info
        
        ports:
        - name: metrics
          containerPort: 2000
          protocol: TCP
        
        # Resource limits
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /metrics
            port: 2000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /metrics
            port: 2000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        
        # Volume mounts
        volumeMounts:
        - name: cache
          mountPath: /var/lib/cloudflare-tunnel
      
      volumes:
      # Cache directory for tunnel operation
      - name: cache
        emptyDir: {}

---
# Service to expose cloudflared metrics
apiVersion: v1
kind: Service
metadata:
  name: cloudflared-metrics
  namespace: cloudflare-tunnel
  labels:
    app.kubernetes.io/name: cloudflare-tunnel
spec:
  type: ClusterIP
  ports:
  - name: metrics
    port: 2000
    targetPort: 2000
    protocol: TCP
  selector:
    app.kubernetes.io/name: cloudflare-tunnel

---
# PodDisruptionBudget to ensure tunnel availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: cloudflared-pdb
  namespace: cloudflare-tunnel
  labels:
    app.kubernetes.io/name: cloudflare-tunnel
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: cloudflare-tunnel
