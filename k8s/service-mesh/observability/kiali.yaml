# Kiali - Service Mesh Observability
# Provides visualization, health monitoring, and configuration validation

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kiali
  namespace: istio-system
  labels:
    app: kiali
    app.kubernetes.io/name: kiali

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kiali
  namespace: istio-system
  labels:
    app: kiali
    app.kubernetes.io/name: kiali
data:
  config.yaml: |
    auth:
      strategy: anonymous  # Change to "openid" for production with SSO
    
    deployment:
      accessible_namespaces:
      - "**"  # All namespaces
      cluster_wide_access: true
    
    external_services:
      custom_dashboards:
        enabled: true
      
      grafana:
        enabled: true
        in_cluster_url: "http://grafana.monitoring.svc.cluster.local:3000"
        url: "https://grafana.254carbon.com"
      
      istio:
        root_namespace: istio-system
        config_map_name: istio
        istio_sidecar_injector_config_map_name: istio-sidecar-injector
      
      prometheus:
        url: "http://prometheus.monitoring.svc.cluster.local:9090"
        custom_metrics_url: "http://prometheus.monitoring.svc.cluster.local:9090"
      
      tracing:
        enabled: true
        in_cluster_url: "http://tracing.istio-system.svc.cluster.local:16686/jaeger"
        url: "http://jaeger.istio-system.svc.cluster.local:16686"
        use_grpc: true
    
    istio_namespace: istio-system
    
    server:
      port: 20001
      web_root: "/"
      metrics_enabled: true
      metrics_port: 9090
    
    health_config:
      rate:
      - namespace: ".*"
        kind: ".*"
        name: ".*"
        tolerance:
        - code: "404"
          protocol: "http"
          direction: "inbound"
          degraded: 5
          failure: 10
    
    login_token:
      signing_key: "kiali-signing-key"
      expiration_seconds: 86400

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kiali
  labels:
    app: kiali
    app.kubernetes.io/name: kiali
rules:
- apiGroups: [""]
  resources:
  - configmaps
  - endpoints
  - pods/log
  verbs:
  - get
  - list
  - watch
- apiGroups: [""]
  resources:
  - namespaces
  - pods
  - replicationcontrollers
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups: [""]
  resources:
  - pods/portforward
  verbs:
  - create
  - post
- apiGroups: ["extensions", "apps"]
  resources:
  - daemonsets
  - deployments
  - replicasets
  - statefulsets
  verbs:
  - get
  - list
  - watch
- apiGroups: ["batch"]
  resources:
  - cronjobs
  - jobs
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.istio.io
  - security.istio.io
  - telemetry.istio.io
  resources: ["*"]
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - patch
- apiGroups: ["apps.openshift.io"]
  resources:
  - deploymentconfigs
  verbs:
  - get
  - list
  - watch
- apiGroups: ["project.openshift.io"]
  resources:
  - projects
  verbs:
  - get
- apiGroups: ["route.openshift.io"]
  resources:
  - routes
  verbs:
  - get
- apiGroups: ["monitoring.coreos.com"]
  resources:
  - servicemonitors
  verbs:
  - get
  - create
- apiGroups: ["authentication.k8s.io"]
  resources:
  - tokenreviews
  verbs:
  - create

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kiali
  labels:
    app: kiali
    app.kubernetes.io/name: kiali
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kiali
subjects:
- kind: ServiceAccount
  name: kiali
  namespace: istio-system

---
apiVersion: v1
kind: Service
metadata:
  name: kiali
  namespace: istio-system
  labels:
    app: kiali
    app.kubernetes.io/name: kiali
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
spec:
  type: ClusterIP
  ports:
  - name: http
    protocol: TCP
    port: 20001
    targetPort: 20001
  - name: metrics
    protocol: TCP
    port: 9090
    targetPort: 9090
  selector:
    app: kiali

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kiali
  namespace: istio-system
  labels:
    app: kiali
    app.kubernetes.io/name: kiali
    version: v1.75.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kiali
  template:
    metadata:
      labels:
        app: kiali
        version: v1.75.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: kiali
      containers:
      - name: kiali
        image: quay.io/kiali/kiali:v1.75
        imagePullPolicy: IfNotPresent
        command:
        - "/opt/kiali/kiali"
        - "-config"
        - "/kiali-configuration/config.yaml"
        ports:
        - name: api-port
          containerPort: 20001
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /kiali/healthz
            port: 20001
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 30
        livenessProbe:
          httpGet:
            path: /kiali/healthz
            port: 20001
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 30
        env:
        - name: ACTIVE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LOG_LEVEL
          value: "info"
        - name: LOG_FORMAT
          value: "text"
        volumeMounts:
        - name: kiali-configuration
          mountPath: "/kiali-configuration"
        - name: kiali-secret
          mountPath: "/kiali-secret"
        resources:
          requests:
            cpu: 10m
            memory: 64Mi
          limits:
            cpu: 500m
            memory: 512Mi
      volumes:
      - name: kiali-configuration
        configMap:
          name: kiali
      - name: kiali-secret
        secret:
          secretName: kiali
          optional: true

---
# Ingress for Kiali UI
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kiali
  namespace: istio-system
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    portal.254carbon.com/service-id: "kiali"
    portal.254carbon.com/service-name: "Kiali"
    portal.254carbon.com/service-category: "monitoring"
    portal.254carbon.com/service-description: "Service mesh visualization and management"
    portal.254carbon.com/service-icon: "üï∏Ô∏è"
spec:
  ingressClassName: nginx
  rules:
  - host: kiali.254carbon.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: kiali
            port:
              number: 20001



