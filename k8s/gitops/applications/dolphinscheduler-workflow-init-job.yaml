apiVersion: batch/v1
kind: Job
metadata:
  name: dolphinscheduler-workflow-init
  namespace: data-platform
  labels:
    app: dolphinscheduler
    component: workflow-init
  annotations:
    argocd.argoproj.io/sync-wave: "2"  # Run after DolphinScheduler is deployed
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  ttlSecondsAfterFinished: 86400  # Keep for 24 hours for debugging
  backoffLimit: 3
  template:
    metadata:
      labels:
        app: dolphinscheduler
        component: workflow-init
    spec:
      restartPolicy: OnFailure
      serviceAccountName: dolphinscheduler-workflow-init
      initContainers:
      - name: wait-for-api
        image: curlimages/curl:latest
        command:
        - sh
        - -c
        - |
          echo "Waiting for DolphinScheduler API to be ready..."
          until curl -s -f http://dolphinscheduler-api.data-platform:12345/dolphinscheduler/ui/ > /dev/null; do
            echo "API not ready, waiting 10s..."
            sleep 10
          done
          echo "API is ready!"
      containers:
      - name: import-workflows
        image: python:3.11-slim
        workingDir: /workspace
        command:
        - /bin/bash
        - -c
        - |
          set -e
          
          # Install dependencies
          echo "Installing dependencies..."
          apt-get update -qq && apt-get install -y -qq git curl jq > /dev/null 2>&1
          pip install --quiet --no-cache-dir requests pyyaml urllib3
          
          # Clone repository if GIT_REPO is set, otherwise use mounted workflows
          if [[ -n "${GIT_REPO}" ]]; then
            echo "Cloning workflows from git: ${GIT_REPO}"
            git clone --depth 1 --branch ${GIT_BRANCH:-main} ${GIT_REPO} /repo
            WORKFLOW_DIR="/repo/workflows"
            SCRIPT_PATH="/repo/scripts/import-workflows-from-files.py"
          else
            echo "Using mounted workflow files from ConfigMap"
            WORKFLOW_DIR="/workflows"
            SCRIPT_PATH="/scripts/import-workflows-from-files.py"
          fi
          
          # Verify workflow files exist
          echo "Checking for workflow files..."
          if ls ${WORKFLOW_DIR}/*.json 1> /dev/null 2>&1; then
            echo "Found $(ls ${WORKFLOW_DIR}/*.json | wc -l) workflow files"
          else
            echo "ERROR: No workflow JSON files found in ${WORKFLOW_DIR}"
            echo "Contents of ${WORKFLOW_DIR}:"
            ls -la ${WORKFLOW_DIR} || true
            exit 1
          fi
          
          # Check if import script exists
          if [[ ! -f "${SCRIPT_PATH}" ]]; then
            echo "WARNING: Import script not found at ${SCRIPT_PATH}"
            echo "This is expected if using ConfigMap placeholders."
            echo "Workflows will be imported when GIT_REPO is configured."
            
            # Simple validation script as fallback
            echo "Validating workflow files..."
            for json_file in ${WORKFLOW_DIR}/*.json; do
              if [[ -f "$json_file" ]]; then
                echo "  Checking $(basename $json_file)..."
                if python3 -c "import json; json.load(open('$json_file'))" 2>/dev/null; then
                  echo "    ✓ Valid JSON"
                else
                  echo "    ✗ Invalid JSON"
                  exit 1
                fi
              fi
            done
            
            echo ""
            echo "✓ All workflow files validated"
            echo "Note: To enable automatic import, set GIT_REPO environment variable"
            echo "      to your repository URL containing workflows and import script."
            exit 0
          fi
          
          # Run import
          echo "Running workflow import..."
          python3 ${SCRIPT_PATH} \
            --dolphin-url http://dolphinscheduler-api.data-platform:12345 \
            --workflow-dir ${WORKFLOW_DIR} \
            --project-name "Commodity Data Platform" \
            --skip-existing || \
          DOLPHIN_URL="http://dolphinscheduler-api.data-platform:12345" \
          WORKFLOW_DIR="${WORKFLOW_DIR}" \
          PROJECT_NAME="Commodity Data Platform" \
          python3 ${SCRIPT_PATH}
          
          echo "✓ Workflow import complete!"
        env:
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: DOLPHIN_USER
          value: "admin"
        - name: DOLPHIN_PASS
          valueFrom:
            secretKeyRef:
              name: dolphinscheduler-admin
              key: password
              optional: true
        # GitOps: Clone workflows from git repository (recommended)
        - name: GIT_REPO
          value: ""  # Set to your repo URL, e.g. https://github.com/org/repo.git
        - name: GIT_BRANCH
          value: "main"
        # API keys auto-loaded from secret
        envFrom:
        - secretRef:
            name: dolphinscheduler-api-keys
            optional: true
        volumeMounts:
        - name: workflow-files
          mountPath: /workflows
          readOnly: true
        - name: import-script
          mountPath: /scripts
          readOnly: true
      volumes:
      - name: workflow-files
        configMap:
          name: dolphinscheduler-workflows
      - name: import-script
        configMap:
          name: dolphinscheduler-import-script
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dolphinscheduler-workflow-init
  namespace: data-platform
  labels:
    app: dolphinscheduler
    component: workflow-init
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: dolphinscheduler-workflow-init
  namespace: data-platform
rules:
- apiGroups: [""]
  resources: ["secrets", "configmaps"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: dolphinscheduler-workflow-init
  namespace: data-platform
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: dolphinscheduler-workflow-init
subjects:
- kind: ServiceAccount
  name: dolphinscheduler-workflow-init
  namespace: data-platform
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dolphinscheduler-workflows
  namespace: data-platform
  labels:
    app: dolphinscheduler
    component: workflows
data:
  # Workflows will be synced from /workflows/*.json via Kustomize or similar
  # Or loaded from git repository
  .gitkeep: ""
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dolphinscheduler-import-script
  namespace: data-platform
  labels:
    app: dolphinscheduler
    component: import-script
data:
  import-workflows-from-files.py: |
    # Import script will be embedded here via kustomize
    # Or reference from git repository
    .gitkeep: ""

