name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-timeout pytest-asyncio
        pip install -r services/event-producer/requirements.txt || true
        pip install -r services/mlflow-orchestration/requirements.txt || true
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ \
          --cov=services \
          --cov-report=xml \
          --cov-report=term-missing \
          -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio psycopg2-binary redis
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ \
          -v \
          -m "not requires_db or not requires_kafka"
      env:
        POSTGRES_HOST: localhost
        REDIS_HOST: localhost

  helm-validation:
    name: Helm Chart Validation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.0'
    
    - name: Validate Helm charts
      run: |
        for chart in helm/charts/data-platform/charts/*; do
          if [ -d "$chart" ]; then
            echo "Validating $(basename $chart)..."
            helm lint $chart || exit 1
          fi
        done
    
    - name: Template rendering test
      run: |
        helm template data-platform helm/charts/data-platform \
          --values helm/charts/data-platform/values/dev.yaml \
          --debug > /dev/null

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Check for critical vulnerabilities
      run: |
        if grep -q "CRITICAL" trivy-results.sarif; then
          echo "Critical vulnerabilities found!"
          exit 1
        fi

  kubernetes-validation:
    name: Kubernetes Manifest Validation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install kubeval
      run: |
        wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
        tar xf kubeval-linux-amd64.tar.gz
        sudo mv kubeval /usr/local/bin
    
    - name: Validate Kubernetes manifests
      run: |
        find k8s -name '*.yaml' -type f | xargs kubeval --ignore-missing-schemas || true



