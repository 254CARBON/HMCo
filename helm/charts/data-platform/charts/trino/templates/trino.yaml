# Trino distributed SQL engine deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trino-coordinator
  namespace: data-platform
  labels:
    app: trino-coordinator
    component: query-engine
spec:
  replicas: 1
  selector:
    matchLabels:
      app: trino-coordinator
  template:
    metadata:
      labels:
        app: trino-coordinator
        component: query-engine
    spec:
      imagePullSecrets: []
      containers:
      - name: trino-coordinator
        image: trinodb/trino:436
        ports:
        - containerPort: 8080
          name: trino-api
        env:
        - name: TRINO_NODE_TYPE
          value: "coordinator"
        - name: TRINO_HTTP_SERVER_HTTP_PORT
          value: "8080"
        - name: TRINO_DISCOVERY_URI
          value: "http://trino-coordinator:8080"
        - name: TRINO_NODE_ENVIRONMENT
          value: "production"
        - name: TRINO_QUERY_MAX_MEMORY
          value: "8GB"
        - name: TRINO_QUERY_MAX_MEMORY_PER_NODE
          value: "3GB"
        - name: TRINO_MEMORY_HEAP_HEADROOM_PER_NODE
          value: "512MB"
        volumeMounts:
        - name: trino-config
          mountPath: /etc/trino
        - name: trino-catalogs
          mountPath: /etc/trino/catalog
        - name: trino-data
          mountPath: /tmp/trino
        resources:
          limits:
            memory: "4Gi"
            cpu: "1000m"
          requests:
            memory: "2Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /v1/info
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /v1/info
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
      volumes:
      - name: trino-config
        configMap:
          name: trino-coordinator-config
      - name: trino-catalogs
        configMap:
          name: trino-catalogs
      - name: trino-data
        emptyDir: {}
---
# Trino Coordinator Service
apiVersion: v1
kind: Service
metadata:
  name: trino-coordinator
  namespace: data-platform
  labels:
    app: trino-coordinator
spec:
  ports:
  - port: 8080
    targetPort: 8080
    name: trino-api
  selector:
    app: trino-coordinator
  type: ClusterIP

---
# Trino Worker nodes
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trino-worker
  namespace: data-platform
  labels:
    app: trino-worker
    component: query-engine
spec:
  replicas: 1
  selector:
    matchLabels:
      app: trino-worker
  template:
    metadata:
      labels:
        app: trino-worker
        component: query-engine
    spec:
      imagePullSecrets: []
      containers:
      - name: trino-worker
        image: trinodb/trino:436
        ports:
        - containerPort: 8080
          name: trino-api
        env:
        - name: TRINO_NODE_TYPE
          value: "worker"
        - name: TRINO_HTTP_SERVER_HTTP_PORT
          value: "8080"
        - name: TRINO_DISCOVERY_URI
          value: "http://trino-coordinator:8080"
        - name: TRINO_NODE_ENVIRONMENT
          value: "production"
        - name: TRINO_QUERY_MAX_MEMORY
          value: "6GB"
        - name: TRINO_QUERY_MAX_MEMORY_PER_NODE
          value: "2GB"
        - name: TRINO_MEMORY_HEAP_HEADROOM_PER_NODE
          value: "512MB"
        volumeMounts:
        - name: trino-config
          mountPath: /etc/trino
        - name: trino-catalogs
          mountPath: /etc/trino/catalog
        - name: trino-data
          mountPath: /tmp/trino
        resources:
          limits:
            memory: "4Gi"
            cpu: "1000m"
          requests:
            memory: "2Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /v1/info
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /v1/info
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
      volumes:
      - name: trino-config
        configMap:
          name: trino-worker-config
      - name: trino-catalogs
        configMap:
          name: trino-catalogs
      - name: trino-data
        emptyDir: {}
---
# Trino Worker Service
apiVersion: v1
kind: Service
metadata:
  name: trino-worker
  namespace: data-platform
  labels:
    app: trino-worker
spec:
  ports:
  - port: 8080
    targetPort: 8080
    name: trino-api
  selector:
    app: trino-worker
  type: ClusterIP

---
# ConfigMap for Trino coordinator configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: trino-coordinator-config
  namespace: data-platform
  labels:
    app: trino
data:
  config.properties: |
    coordinator=true
    node-scheduler.include-coordinator=false
    http-server.http.port=8080
    discovery-server.enabled=true
    discovery.uri=http://trino-coordinator:8080
    query.max-memory=8GB
    query.max-memory-per-node=3GB
    memory.heap-headroom-per-node=512MB
    exchange.http-client.max-connections=1000
    exchange.http-client.max-connections-per-server=100
    exchange.http-client.connect-timeout=10m
    exchange.http-client.idle-timeout=10m
    exchange.http-client.request-timeout=10m

  node.properties: |
    node.environment=production
    node.data-dir=/tmp/trino/data

  jvm.config: |
    -server
    -Xmx4G
    -XX:+UseG1GC
    -XX:G1HeapRegionSize=32M
    -XX:+UseGCOverheadLimit
    -XX:+ExplicitGCInvokesConcurrent
    -XX:+HeapDumpOnOutOfMemoryError
    -XX:+ExitOnOutOfMemoryError
    -Djdk.attach.allowAttachSelf=true
    -Djdk.nio.maxCachedBufferSize=2000000

  log.properties: |
    com.facebook.presto=INFO
    com.facebook.airlift=INFO

---
# ConfigMap for Trino worker configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: trino-worker-config
  namespace: data-platform
  labels:
    app: trino
data:
  config.properties: |
    coordinator=false
    http-server.http.port=8080
    discovery.uri=http://trino-coordinator:8080
    query.max-memory=6GB
    query.max-memory-per-node=2GB
    memory.heap-headroom-per-node=512MB
    exchange.http-client.max-connections=1000
    exchange.http-client.max-connections-per-server=100
    exchange.http-client.connect-timeout=10m
    exchange.http-client.idle-timeout=10m
    exchange.http-client.request-timeout=10m

  node.properties: |
    node.environment=production
    node.data-dir=/tmp/trino/data

  jvm.config: |
    -server
    -Xmx4G
    -XX:+UseG1GC
    -XX:G1HeapRegionSize=32M
    -XX:+UseGCOverheadLimit
    -XX:+ExplicitGCInvokesConcurrent
    -XX:+HeapDumpOnOutOfMemoryError
    -XX:+ExitOnOutOfMemoryError
    -Djdk.attach.allowAttachSelf=true
    -Djdk.nio.maxCachedBufferSize=2000000

  log.properties: |
    com.facebook.presto=INFO
    com.facebook.airlift=INFO

---
# ConfigMap for Trino catalog configurations
apiVersion: v1
kind: ConfigMap
metadata:
  name: trino-catalogs
  namespace: data-platform
  labels:
    app: trino
data:
  # PostgreSQL catalog (shared)
  postgres-shared.properties: |
    connector.name=postgresql
    connection-url=jdbc:postgresql://postgres-shared-service:5432/datahub
    connection-user=datahub
    connection-password=datahub_password

  # PostgreSQL catalog (workflow)
  postgres-workflow.properties: |
    connector.name=postgresql
    connection-url=jdbc:postgresql://postgres-workflow-service:5432/dolphinscheduler
    connection-user=dolphinscheduler
    connection-password=workflow_password

  # Iceberg catalog
  iceberg.properties: |
    connector.name=iceberg
    iceberg.catalog.type=rest
    iceberg.rest-catalog.uri=http://iceberg-rest-catalog:8181
    iceberg.rest-catalog.warehouse=s3://iceberg-warehouse/
    iceberg.rest-catalog.security=none
    # Iceberg-specific settings
    iceberg.pushdown-projection-enabled=true
    iceberg.pushdown-filters-enabled=true
    iceberg.split-manager-threads=4
    iceberg.max-split-size=134217728

  # Elasticsearch catalog
  elasticsearch.properties: |
    connector.name=elasticsearch
    elasticsearch.host=elasticsearch-service
    elasticsearch.port=9200
    elasticsearch.default-schema-name=default

  # MySQL catalog (for SeaTunnel)
  mysql-seatunnel.properties: |
    connector.name=mysql
    connection-url=jdbc:mysql://mysql-seatunnel-service:3306
    connection-user=seatunnel
    connection-password=seatunnel_password
