# Apache Superset resources for the data-platform namespace
#
# This manifest defines:
#   - ConfigMap containing Superset configuration
#   - One-time initialization Job (database migrations + admin bootstrap)
#   - Deployments for the web UI, Celery worker, and Celery beat scheduler
#   - ClusterIP Service for the Superset web UI
#   - Redis deployment/service used for caching, Celery broker, and results backend
#
# Secrets referenced here are defined in k8s/visualization/superset-secrets.example.yaml

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: superset-config
  namespace: data-platform
  labels:
    app: superset
data:
  superset_config.py: |
    import os
    from cachelib.redis import RedisCache
    from superset.security import SupersetSecurityManager
    from flask_appbuilder.security.manager import AUTH_DB, AUTH_REMOTE_USER

    # General Superset configuration
    SUPERSET_ENV = "production"
    SUPERSET_WEBSERVER_PORT = 8088
    SUPERSET_WEBSERVER_ADDRESS = "0.0.0.0"
    SUPERSET_WEBSERVER_PROTOCOL = "https"
    ENABLE_PROXY_FIX = True
    PREFERRED_URL_SCHEME = "https"

    SQLALCHEMY_DATABASE_URI = os.environ.get("DATABASE_URI")

    # Redis configuration
    REDIS_HOST = os.environ.get("REDIS_HOST", "redis-service.data-platform.svc.cluster.local")
    REDIS_PORT = int(os.environ.get("REDIS_PORT", 6379))
    REDIS_CACHE_DB = int(os.environ.get("REDIS_CACHE_DB", 1))
    REDIS_RESULTS_DB = int(os.environ.get("REDIS_RESULTS_DB", 3))

    CACHE_CONFIG = {
        "CACHE_TYPE": "RedisCache",
        "CACHE_DEFAULT_TIMEOUT": 300,
        "CACHE_KEY_PREFIX": "superset_cache_",
        "CACHE_REDIS_HOST": REDIS_HOST,
        "CACHE_REDIS_PORT": REDIS_PORT,
        "CACHE_REDIS_DB": REDIS_CACHE_DB,
    }

    DATA_CACHE_CONFIG = CACHE_CONFIG

    RESULTS_BACKEND = RedisCache(
        host=REDIS_HOST,
        port=REDIS_PORT,
        db=REDIS_RESULTS_DB,
        key_prefix="superset_results_",
    )

    # Celery configuration
    CELERY_BROKER_URL = os.environ.get("CELERY_BROKER_URL")
    CELERY_RESULT_BACKEND = os.environ.get("CELERY_RESULT_BACKEND")

    class CeleryConfig(object):
        broker_url = CELERY_BROKER_URL
        result_backend = CELERY_RESULT_BACKEND
        imports = (
            "superset.sql_lab",
            "superset.tasks.async_queries",
            "superset.tasks.cache",
            "superset.tasks.scheduler",
            "superset.tasks.thumbnails",
        )
        worker_prefetch_multiplier = 10
        task_annotations = {
            "sql_lab.get_sql_results": {"rate_limit": "100/s"},
        }

    CELERY_CONFIG = CeleryConfig

    SQLLAB_ASYNC_TIME_LIMIT_SEC = int(os.environ.get("SQLLAB_ASYNC_TIME_LIMIT_SEC", 3600))
    SQLLAB_ASYNC_RESULT_BACKEND = RedisCache(
        host=REDIS_HOST,
        port=REDIS_PORT,
        db=int(os.environ.get("SQLLAB_ASYNC_REDIS_DB", 3)),
        key_prefix="superset_sqllab_",
    )

    # Security configuration
    SECRET_KEY = os.environ.get("SUPERSET_SECRET_KEY")
    SESSION_COOKIE_SECURE = True
    SESSION_COOKIE_HTTPONLY = True
    SESSION_COOKIE_SAMESITE = "Lax"
    WTF_CSRF_ENABLED = True
    WTF_CSRF_SECRET_KEY = SECRET_KEY

    # Authentication
    # Default to database auth; allow switching to reverse-proxy (SSO) auth
    AUTH_TYPE = AUTH_DB
    AUTH_USER_REGISTRATION = False
    if str(os.environ.get("SUPERSET_DISABLE_LOCAL_AUTH", "false")).lower() in ("1", "true", "yes", "y", "on"):
        # Accept identity from reverse proxy header set by ingress
        AUTH_TYPE = AUTH_REMOTE_USER
        AUTH_USER_REGISTRATION = True
        AUTH_USER_REGISTRATION_ROLE = "Gamma"
        # Header name forwarded by ingress from Cloudflare Access
        # In Flask/Werkzeug, headers are available to AppBuilder via request headers directly
        AUTH_REMOTE_USER_HEADER = "X-WEBAUTH-USER"

    # Use the built-in security manager by default.
    CUSTOM_SECURITY_MANAGER = SupersetSecurityManager

    # Feature flags
    FEATURE_FLAGS = {
        "ENABLE_TEMPLATE_PROCESSING": True,
        "DASHBOARD_NATIVE_FILTERS": True,
        "DASHBOARD_CROSS_FILTERS": True,
        "GENERIC_CHART_AXES": True,
        "DRILL_TO_DETAIL": True,
        "DRILL_BY": True,
        "DASHBOARD_RBAC": True,
        "ENABLE_ADVANCED_DATA_TYPES": True,
        "DASHBOARD_NATIVE_FILTERS_SET": True,
        "HORIZONTAL_FILTER_BAR": True,
        "DASHBOARD_FILTERS_EXPERIMENTAL": True,
    }

---
apiVersion: batch/v1
kind: Job
metadata:
  name: superset-init
  namespace: data-platform
  labels:
    app: superset
    component: init
spec:
  backoffLimit: 3
  ttlSecondsAfterFinished: 600
  template:
    metadata:
      labels:
        app: superset
        component: init
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      restartPolicy: OnFailure
      containers:
      - name: superset-init
        image: apache/superset:3.0.0
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
        command:
        - /bin/bash
        - -c
        - |
          set -euo pipefail
          echo "Installing client drivers..."
          pip install --no-cache-dir trino pymysql >/tmp/pip-install.log 2>&1 || { cat /tmp/pip-install.log; exit 1; }

          echo "Running database migrations..."
          superset db upgrade

          echo "Ensuring admin user exists..."
          if superset fab create-admin \
            --username "${ADMIN_USERNAME}" \
            --firstname "${ADMIN_FIRSTNAME}" \
            --lastname "${ADMIN_LASTNAME}" \
            --email "${ADMIN_EMAIL}" \
            --password "${ADMIN_PASSWORD}"; then
            echo "Admin user ensured."
          else
            echo "Admin user already exists or creation failed; continuing."
          fi

          echo "Initializing Superset..."
          superset init

          echo "Configuring external database connections..."
          if [ -n "${SUPERSET_DORIS_URI:-}" ]; then
            echo "Configuring Doris connection..."
            superset set-database-uri \
              --database-name Doris \
              --uri "${SUPERSET_DORIS_URI}" \
              || echo "Failed to configure Doris connection"
          fi

          if [ -n "${SUPERSET_TRINO_URI:-}" ]; then
            echo "Configuring Trino connection..."
            superset set-database-uri \
              --database-name Trino \
              --uri "${SUPERSET_TRINO_URI}" \
              || echo "Failed to configure Trino connection"
          fi
        env:
        - name: SUPERSET_CONFIG_PATH
          value: "/app/superset_config.py"
        - name: FLASK_APP
          value: "superset"
        - name: PYTHONPATH
          value: "/app"
        - name: SUPERSET_HOME
          value: "/app"
        - name: PIP_ADDITIONAL_REQUIREMENTS
          value: "trino pymysql"
        - name: SUPERSET_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: SUPERSET_SECRET_KEY
        - name: DATABASE_URI
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: DATABASE_URI
        - name: ADMIN_USERNAME
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: ADMIN_USERNAME
        - name: ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: ADMIN_PASSWORD
        - name: ADMIN_EMAIL
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: ADMIN_EMAIL
        - name: ADMIN_FIRSTNAME
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: ADMIN_FIRSTNAME
        - name: ADMIN_LASTNAME
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: ADMIN_LASTNAME
        - name: CELERY_BROKER_URL
          value: "redis://redis-service.data-platform.svc.cluster.local:6379/2"
        - name: CELERY_RESULT_BACKEND
          value: "redis://redis-service.data-platform.svc.cluster.local:6379/3"
        - name: SUPERSET_DORIS_URI
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: SUPERSET_DORIS_URI
              optional: true
        - name: SUPERSET_TRINO_URI
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: SUPERSET_TRINO_URI
              optional: true
        volumeMounts:
        - name: superset-config
          mountPath: /app/superset_config.py
          subPath: superset_config.py
      volumes:
      - name: superset-config
        configMap:
          name: superset-config

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: superset-web
  namespace: data-platform
  labels:
    app: superset
    component: web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: superset
      component: web
  template:
    metadata:
      labels:
        app: superset
        component: web
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      initContainers:
      - name: wait-for-postgres
        image: busybox:1.36
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
        command:
        - sh
        - -c
        - |
          until nc -z postgres-shared-service.data-platform.svc.cluster.local 5432; do
            echo "Waiting for PostgreSQL...";
            sleep 5;
          done
      - name: wait-for-redis
        image: busybox:1.36
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
        command:
        - sh
        - -c
        - |
          until nc -z redis-service.data-platform.svc.cluster.local 6379; do
            echo "Waiting for Redis...";
            sleep 5;
          done
      containers:
      - name: superset
        image: apache/superset:3.0.0
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
        command:
        - /bin/sh
        - -c
        args:
        - |
          pip install --no-cache-dir trino pymysql >/tmp/pip-install.log 2>&1 || { cat /tmp/pip-install.log; exit 1; }
          exec gunicorn \
            --bind=0.0.0.0:8088 \
            --workers=4 \
            --threads=8 \
            --timeout=300 \
            'superset.app:create_app()'
        ports:
        - containerPort: 8088
          name: superset
        env:
        - name: SUPERSET_CONFIG_PATH
          value: "/app/superset_config.py"
        - name: FLASK_APP
          value: "superset"
        - name: PYTHONPATH
          value: "/app"
        - name: SUPERSET_HOME
          value: "/app"
        - name: PIP_ADDITIONAL_REQUIREMENTS
          value: "trino pymysql"
        - name: SUPERSET_PORT
          value: "8088"
        - name: SUPERSET_ENV
          value: "production"
        - name: SUPERSET_DISABLE_LOCAL_AUTH
          value: "true"
        - name: SUPERSET_LOAD_EXAMPLES
          value: "no"
        - name: SUPERSET_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: SUPERSET_SECRET_KEY
        - name: DATABASE_URI
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: DATABASE_URI
        - name: CELERY_BROKER_URL
          value: "redis://redis-service.data-platform.svc.cluster.local:6379/2"
        - name: CELERY_RESULT_BACKEND
          value: "redis://redis-service.data-platform.svc.cluster.local:6379/3"
        - name: REDIS_HOST
          value: "redis-service.data-platform.svc.cluster.local"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_CACHE_DB
          value: "1"
        - name: REDIS_RESULTS_DB
          value: "3"
        - name: SQLLAB_ASYNC_REDIS_DB
          value: "3"
        - name: SQLLAB_ASYNC_TIME_LIMIT_SEC
          value: "3600"
        - name: SUPERSET_WEBSERVER_TIMEOUT
          value: "300"
        - name: SUPERSET_WEBSERVER_THREADS
          value: "8"
        - name: GUNICORN_TIMEOUT
          value: "300"
        volumeMounts:
        - name: superset-config
          mountPath: /app/superset_config.py
          subPath: superset_config.py
        - name: superset-logs
          mountPath: /app/logs
        resources:
          requests:
            cpu: "500m"
            memory: "1Gi"
          limits:
            cpu: "1000m"
            memory: "2Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: 8088
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /health
            port: 8088
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
      volumes:
      - name: superset-config
        configMap:
          name: superset-config
      - name: superset-logs
        emptyDir: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: superset-worker
  namespace: data-platform
  labels:
    app: superset
    component: worker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: superset
      component: worker
  template:
    metadata:
      labels:
        app: superset
        component: worker
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: superset-worker
        image: apache/superset:3.0.0
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
        command:
        - /bin/sh
        - -c
        args:
        - |
          pip install --no-cache-dir trino pymysql >/tmp/pip-install.log 2>&1 || { cat /tmp/pip-install.log; exit 1; }
          exec celery \
            --app=superset.tasks.celery_app:app \
            worker \
            --pool=prefork \
            --loglevel=INFO \
            --concurrency=4 \
            --pidfile=/app/logs/celery-worker.pid
        env:
        - name: SUPERSET_CONFIG_PATH
          value: "/app/superset_config.py"
        - name: FLASK_APP
          value: "superset"
        - name: PYTHONPATH
          value: "/app"
        - name: SUPERSET_HOME
          value: "/app"
        - name: PIP_ADDITIONAL_REQUIREMENTS
          value: "trino pymysql"
        - name: SUPERSET_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: SUPERSET_SECRET_KEY
        - name: DATABASE_URI
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: DATABASE_URI
        - name: CELERY_BROKER_URL
          value: "redis://redis-service.data-platform.svc.cluster.local:6379/2"
        - name: CELERY_RESULT_BACKEND
          value: "redis://redis-service.data-platform.svc.cluster.local:6379/3"
        - name: REDIS_HOST
          value: "redis-service.data-platform.svc.cluster.local"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_CACHE_DB
          value: "1"
        - name: REDIS_RESULTS_DB
          value: "3"
        - name: SQLLAB_ASYNC_REDIS_DB
          value: "3"
        volumeMounts:
        - name: superset-config
          mountPath: /app/superset_config.py
          subPath: superset_config.py
        - name: superset-logs
          mountPath: /app/logs
        resources:
          requests:
            cpu: "250m"
            memory: "512Mi"
          limits:
            cpu: "1000m"
            memory: "1Gi"
        livenessProbe:
          exec:
            command:
            - bash
            - -c
            - "test -s /app/logs/celery-worker.pid && kill -0 \"$(cat /app/logs/celery-worker.pid)\""
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          exec:
            command:
            - bash
            - -c
            - "test -s /app/logs/celery-worker.pid && kill -0 \"$(cat /app/logs/celery-worker.pid)\""
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
      volumes:
      - name: superset-config
        configMap:
          name: superset-config
      - name: superset-logs
        emptyDir: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: superset-beat
  namespace: data-platform
  labels:
    app: superset
    component: beat
spec:
  replicas: 1
  selector:
    matchLabels:
      app: superset
      component: beat
  template:
    metadata:
      labels:
        app: superset
        component: beat
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: superset-beat
        image: apache/superset:3.0.0
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
        command:
        - /bin/sh
        - -c
        args:
        - |
          pip install --no-cache-dir trino pymysql >/tmp/pip-install.log 2>&1 || { cat /tmp/pip-install.log; exit 1; }
          exec celery \
            --app=superset.tasks.celery_app:app \
            beat \
            --loglevel=INFO \
            --schedule=/app/logs/celerybeat-schedule \
            --pidfile=/app/logs/celery-beat.pid
        env:
        - name: SUPERSET_CONFIG_PATH
          value: "/app/superset_config.py"
        - name: FLASK_APP
          value: "superset"
        - name: PYTHONPATH
          value: "/app"
        - name: SUPERSET_HOME
          value: "/app"
        - name: SUPERSET_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: SUPERSET_SECRET_KEY
        - name: DATABASE_URI
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: DATABASE_URI
        - name: CELERY_BROKER_URL
          value: "redis://redis-service.data-platform.svc.cluster.local:6379/2"
        - name: CELERY_RESULT_BACKEND
          value: "redis://redis-service.data-platform.svc.cluster.local:6379/3"
        - name: REDIS_HOST
          value: "redis-service.data-platform.svc.cluster.local"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_CACHE_DB
          value: "1"
        - name: REDIS_RESULTS_DB
          value: "3"
        - name: SQLLAB_ASYNC_REDIS_DB
          value: "3"
        volumeMounts:
        - name: superset-config
          mountPath: /app/superset_config.py
          subPath: superset_config.py
        - name: superset-logs
          mountPath: /app/logs
        resources:
          requests:
            cpu: "100m"
            memory: "256Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        livenessProbe:
          exec:
            command:
            - bash
            - -c
            - "test -s /app/logs/celery-beat.pid && kill -0 \"$(cat /app/logs/celery-beat.pid)\""
          initialDelaySeconds: 60
          periodSeconds: 60
          timeoutSeconds: 10
        readinessProbe:
          exec:
            command:
            - bash
            - -c
            - "test -s /app/logs/celery-beat.pid && kill -0 \"$(cat /app/logs/celery-beat.pid)\""
          initialDelaySeconds: 30
          periodSeconds: 60
          timeoutSeconds: 10
      volumes:
      - name: superset-config
        configMap:
          name: superset-config
      - name: superset-logs
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: superset
  namespace: data-platform
  labels:
    app: superset
spec:
  type: ClusterIP
  ports:
  - name: superset
    port: 8088
    targetPort: 8088
  selector:
    app: superset
    component: web

---
# Redis for Superset caching, Celery broker, and results backend
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: data-platform
  labels:
    app: redis
    component: caching
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        component: caching
    spec:
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: redis
        image: redis:7.2-alpine
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
        ports:
        - containerPort: 6379
          name: redis
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        volumeMounts:
        - name: redis-data
          mountPath: /data
        resources:
          limits:
            memory: "512Mi"
            cpu: "250m"
          requests:
            memory: "256Mi"
            cpu: "100m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-data
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: data-platform
  labels:
    app: redis
spec:
  type: ClusterIP
  selector:
    app: redis
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
