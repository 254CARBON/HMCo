{{- $globalVals := default (dict) .Values.global -}}
{{- $globalSso := default (dict) (get $globalVals "sso") -}}
{{- $supersetVals := default (dict) .Values -}}
{{- $supersetSso := default (dict) (get $supersetVals "sso") -}}
{{- $defaultScopes := list "openid" "profile" "email" -}}
{{- $scopesCandidate := default (get $globalSso "scopes") (get $supersetSso "scopes") -}}
{{- $effectiveScopes := default $defaultScopes $scopesCandidate -}}
{{- $claimMappings := default (dict) (get $globalSso "claimMappings") -}}
{{- $groupsClaim := default "groups" (get $claimMappings "groups") -}}
{{- $emailClaim := default "email" (get $claimMappings "email") -}}
{{- $nameClaim := default "name" (get $claimMappings "name") -}}
{{- $usernameClaim := default "email" (get $claimMappings "username") -}}
{{- $groupsConfig := default (dict) (get $globalSso "groups") -}}
{{- $adminGroup := default "platform-admins" (get $groupsConfig "admin") -}}
{{- $editorGroup := default "data-engineers" (get $groupsConfig "editor") -}}
{{- $viewerGroup := default "data-analysts" (get $groupsConfig "viewer") -}}
{{- $tokenMethod := default "client_secret_post" (get $supersetSso "tokenMethod") -}}
{{- $clientSecretCfg := default (dict) (get $supersetSso "clientSecretSecret") -}}
{{- $discoveryUrl := default (get $globalSso "discoveryUrl") (get $supersetSso "discoveryUrl") -}}
{{- $userInfoUrl := default (get $globalSso "userInfoUrl") (get $supersetSso "userInfoUrl") -}}
{{- $logoutUrl := default (get $globalSso "logoutUrl") (get $supersetSso "logoutUrl") -}}
{{- $redirectUri := default "" (get $supersetSso "redirectUri") -}}
{{- $issuerUrl := default (get $globalSso "issuerUrl") (get $supersetSso "issuerUrl") -}}
# Apache Superset resources for the data-platform namespace
#
# This manifest defines:
#   - ConfigMap containing Superset configuration
#   - One-time initialization Job (database migrations + admin bootstrap)
#   - Deployments for the web UI, Celery worker, and Celery beat scheduler
#   - ClusterIP Service for the Superset web UI
#   - Redis deployment/service used for caching, Celery broker, and results backend
#
# Secrets referenced here are defined in k8s/visualization/superset-secrets.example.yaml

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: superset-config
  namespace: data-platform
  labels:
    app: superset
data:
  superset_config.py: |
    import os
    from cachelib.redis import RedisCache
    from superset.security import SupersetSecurityManager
    from flask_appbuilder.security.manager import AUTH_DB, AUTH_OAUTH, AUTH_REMOTE_USER

    # General Superset configuration
    SUPERSET_ENV = "production"
    SUPERSET_WEBSERVER_PORT = 8088
    SUPERSET_WEBSERVER_ADDRESS = "0.0.0.0"
    SUPERSET_WEBSERVER_PROTOCOL = "https"
    ENABLE_PROXY_FIX = True
    PREFERRED_URL_SCHEME = "https"

    SQLALCHEMY_DATABASE_URI = os.environ.get("DATABASE_URI")

    # Redis configuration
    REDIS_HOST = os.environ.get("REDIS_HOST", "redis-service.data-platform.svc.cluster.local")
    REDIS_PORT = int(os.environ.get("REDIS_PORT", 6379))
    REDIS_CACHE_DB = int(os.environ.get("REDIS_CACHE_DB", 1))
    REDIS_RESULTS_DB = int(os.environ.get("REDIS_RESULTS_DB", 3))

    CACHE_CONFIG = {
        "CACHE_TYPE": "RedisCache",
        "CACHE_DEFAULT_TIMEOUT": 300,
        "CACHE_KEY_PREFIX": "superset_cache_",
        "CACHE_REDIS_HOST": REDIS_HOST,
        "CACHE_REDIS_PORT": REDIS_PORT,
        "CACHE_REDIS_DB": REDIS_CACHE_DB,
    }

    DATA_CACHE_CONFIG = CACHE_CONFIG

    RESULTS_BACKEND = RedisCache(
        host=REDIS_HOST,
        port=REDIS_PORT,
        db=REDIS_RESULTS_DB,
        key_prefix="superset_results_",
    )

    # Celery configuration
    CELERY_BROKER_URL = os.environ.get("CELERY_BROKER_URL")
    CELERY_RESULT_BACKEND = os.environ.get("CELERY_RESULT_BACKEND")

    class CeleryConfig(object):
        broker_url = CELERY_BROKER_URL
        result_backend = CELERY_RESULT_BACKEND
        imports = (
            "superset.sql_lab",
            "superset.tasks.async_queries",
            "superset.tasks.cache",
            "superset.tasks.scheduler",
            "superset.tasks.thumbnails",
        )
        worker_prefetch_multiplier = 10
        task_annotations = {
            "sql_lab.get_sql_results": {"rate_limit": "100/s"},
        }

    CELERY_CONFIG = CeleryConfig

    SQLLAB_ASYNC_TIME_LIMIT_SEC = int(os.environ.get("SQLLAB_ASYNC_TIME_LIMIT_SEC", 3600))
    SQLLAB_ASYNC_RESULT_BACKEND = RedisCache(
        host=REDIS_HOST,
        port=REDIS_PORT,
        db=int(os.environ.get("SQLLAB_ASYNC_REDIS_DB", 3)),
        key_prefix="superset_sqllab_",
    )

    # Security configuration
    SECRET_KEY = os.environ.get("SUPERSET_SECRET_KEY")
    SESSION_COOKIE_SECURE = True
    SESSION_COOKIE_HTTPONLY = True
    SESSION_COOKIE_SAMESITE = "Lax"
    WTF_CSRF_ENABLED = True
    WTF_CSRF_SECRET_KEY = SECRET_KEY

    # Authentication
    # Default to database auth; switch to OIDC or reverse-proxy auth if configured
    def _is_enabled(value: str) -> bool:
        return str(value or "").lower() in ("1", "true", "yes", "y", "on")

    AUTH_TYPE = AUTH_DB
    AUTH_USER_REGISTRATION = False
    AUTH_ROLE_ADMIN = "Admin"
    AUTH_ROLE_PUBLIC = "Public"
    AUTH_USER_REGISTRATION_ROLE = "Gamma"
    AUTH_ROLES_SYNC_AT_LOGIN = False
    AUTH_ROLES_MAPPING = {}
    CUSTOM_SECURITY_MANAGER = SupersetSecurityManager

    OIDC_ENABLED = _is_enabled(os.environ.get("SUPERSET_OIDC_ENABLED", "false"))
    DISABLE_LOCAL_AUTH = _is_enabled(os.environ.get("SUPERSET_DISABLE_LOCAL_AUTH", "false"))

    if OIDC_ENABLED:
        AUTH_TYPE = AUTH_OAUTH
        AUTH_USER_REGISTRATION = True
        AUTH_ROLES_SYNC_AT_LOGIN = True
        AUTH_USER_REGISTRATION_ROLE = os.environ.get("SUPERSET_OIDC_DEFAULT_ROLE", "Gamma")

        OIDC_PROVIDER_NAME = os.environ.get("SUPERSET_OIDC_PROVIDER_NAME", "OIDC")
        OIDC_CLIENT_ID = os.environ.get("SUPERSET_OIDC_CLIENT_ID")
        OIDC_CLIENT_SECRET = os.environ.get("SUPERSET_OIDC_CLIENT_SECRET")
        OIDC_DISCOVERY_URL = os.environ.get("SUPERSET_OIDC_DISCOVERY_URL")
        OIDC_SCOPES = os.environ.get("SUPERSET_OIDC_SCOPES", "openid profile email")
        OIDC_TOKEN_METHOD = os.environ.get("SUPERSET_OIDC_TOKEN_METHOD", "client_secret_post")
        OIDC_USERINFO_URL = os.environ.get("SUPERSET_OIDC_USERINFO_URL")
        OIDC_LOGOUT_URL = os.environ.get("SUPERSET_OIDC_LOGOUT_URL")
        OIDC_REDIRECT_URI = os.environ.get("SUPERSET_OIDC_REDIRECT_URI")
        OIDC_EMAIL_CLAIM = os.environ.get("SUPERSET_OIDC_EMAIL_CLAIM", os.environ.get("SUPERSET_OIDC_USERNAME_CLAIM", "email"))
        OIDC_NAME_CLAIM = os.environ.get("SUPERSET_OIDC_NAME_CLAIM", "name")
        OIDC_USERNAME_CLAIM = os.environ.get("SUPERSET_OIDC_USERNAME_CLAIM", OIDC_EMAIL_CLAIM)
        OIDC_GROUPS_CLAIM = os.environ.get("SUPERSET_OIDC_GROUPS_CLAIM", "groups")
        OIDC_ISSUER = os.environ.get("SUPERSET_OIDC_ISSUER")

        AUTH_ROLES_MAPPING = {}
        role_group_pairs = (
            ("SUPERSET_OIDC_ADMIN_GROUP", ["Admin"]),
            ("SUPERSET_OIDC_EDITOR_GROUP", ["Alpha"]),
            ("SUPERSET_OIDC_VIEWER_GROUP", ["Gamma"]),
        )
        for env_var, roles in role_group_pairs:
            group = os.environ.get(env_var)
            if group:
                AUTH_ROLES_MAPPING[group] = roles

        OAUTH_PROVIDERS = [
            {
                "name": OIDC_PROVIDER_NAME,
                "token_key": "access_token",
                "icon": "fa-circle",
                "remote_app": {
                    "client_id": OIDC_CLIENT_ID,
                    "client_secret": OIDC_CLIENT_SECRET,
                    "server_metadata_url": OIDC_DISCOVERY_URL,
                    "client_kwargs": {
                        "scope": OIDC_SCOPES,
                        "token_endpoint_auth_method": OIDC_TOKEN_METHOD,
                    },
                },
            }
        ]

        if OIDC_REDIRECT_URI:
            OAUTH_PROVIDERS[0]["remote_app"]["redirect_uri"] = OIDC_REDIRECT_URI
        if OIDC_USERINFO_URL:
            OAUTH_PROVIDERS[0]["remote_app"]["userinfo_endpoint"] = OIDC_USERINFO_URL
        if OIDC_LOGOUT_URL:
            OAUTH_PROVIDERS[0]["remote_app"]["logout_redirect_url"] = OIDC_LOGOUT_URL
        if OIDC_ISSUER:
            OAUTH_PROVIDERS[0]["remote_app"]["issuer"] = OIDC_ISSUER

        class OIDCSecurityManager(SupersetSecurityManager):
            def oauth_user_info(self, provider, response=None):
                info = super().oauth_user_info(provider, response) or {}
                data = response or {}
                groups = data.get(OIDC_GROUPS_CLAIM) or info.get(OIDC_GROUPS_CLAIM) or []
                if isinstance(groups, str):
                    groups = [grp.strip() for grp in groups.split(",") if grp.strip()]
                info["email"] = data.get(OIDC_EMAIL_CLAIM) or info.get(OIDC_EMAIL_CLAIM) or info.get("email")
                info["name"] = data.get(OIDC_NAME_CLAIM) or info.get(OIDC_NAME_CLAIM) or info.get("name")
                info["username"] = data.get(OIDC_USERNAME_CLAIM) or info.get(OIDC_USERNAME_CLAIM) or info.get("username")
                info["role_keys"] = groups
                return info

        CUSTOM_SECURITY_MANAGER = OIDCSecurityManager

    elif DISABLE_LOCAL_AUTH:
        AUTH_TYPE = AUTH_REMOTE_USER
        AUTH_USER_REGISTRATION = True
        AUTH_USER_REGISTRATION_ROLE = "Gamma"
        AUTH_REMOTE_USER_HEADER = "X-WEBAUTH-USER"

    # Feature flags
    FEATURE_FLAGS = {
        "ENABLE_TEMPLATE_PROCESSING": True,
        "DASHBOARD_NATIVE_FILTERS": True,
        "DASHBOARD_CROSS_FILTERS": True,
        "GENERIC_CHART_AXES": True,
        "DRILL_TO_DETAIL": True,
        "DRILL_BY": True,
        "DASHBOARD_RBAC": True,
        "ENABLE_ADVANCED_DATA_TYPES": True,
        "DASHBOARD_NATIVE_FILTERS_SET": True,
        "HORIZONTAL_FILTER_BAR": True,
        "DASHBOARD_FILTERS_EXPERIMENTAL": True,
    }

---
apiVersion: batch/v1
kind: Job
metadata:
  name: superset-init
  namespace: data-platform
  labels:
    app: superset
    component: init
spec:
  backoffLimit: 3
  ttlSecondsAfterFinished: 600
  template:
    metadata:
      labels:
        app: superset
        component: init
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      restartPolicy: OnFailure
      containers:
      - name: superset-init
        image: apache/superset:3.0.0
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
        command:
        - /bin/bash
        - -c
        - |
          set -euo pipefail
          echo "Installing client drivers..."
          pip install --no-cache-dir trino pymysql >/tmp/pip-install.log 2>&1 || { cat /tmp/pip-install.log; exit 1; }

          echo "Running database migrations..."
          superset db upgrade

          echo "Ensuring admin user exists..."
          if superset fab create-admin \
            --username "${ADMIN_USERNAME}" \
            --firstname "${ADMIN_FIRSTNAME}" \
            --lastname "${ADMIN_LASTNAME}" \
            --email "${ADMIN_EMAIL}" \
            --password "${ADMIN_PASSWORD}"; then
            echo "Admin user ensured."
          else
            echo "Admin user already exists or creation failed; continuing."
          fi

          echo "Initializing Superset..."
          superset init

          echo "Configuring external database connections..."

          if [ -n "${SUPERSET_CLICKHOUSE_URI:-}" ]; then
            echo "Configuring ClickHouse connection..."
            superset set-database-uri \
              --database-name ClickHouse \
              --uri "${SUPERSET_CLICKHOUSE_URI}" \
              || echo "Failed to configure ClickHouse connection"
          fi

          if [ -n "${SUPERSET_TRINO_URI:-}" ]; then
            echo "Configuring Trino connection..."
            superset set-database-uri \
              --database-name Trino \
              --uri "${SUPERSET_TRINO_URI}" \
              || echo "Failed to configure Trino connection"
          fi
        env:
        - name: SUPERSET_CONFIG_PATH
          value: "/app/superset_config.py"
        - name: FLASK_APP
          value: "superset"
        - name: PYTHONPATH
          value: "/app"
        - name: SUPERSET_HOME
          value: "/app"
        - name: PIP_ADDITIONAL_REQUIREMENTS
          value: "trino pymysql"
        - name: SUPERSET_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: SUPERSET_SECRET_KEY
        - name: DATABASE_URI
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: DATABASE_URI
        - name: SUPERSET_OIDC_ENABLED
          value: {{ ternary "true" "false" (default false (get $supersetSso "enabled")) | quote }}
        - name: SUPERSET_OIDC_PROVIDER_NAME
          value: {{ default "254Carbon SSO" (get $supersetSso "providerName") | quote }}
        - name: SUPERSET_OIDC_CLIENT_ID
          value: {{ default "" (get $supersetSso "clientId") | quote }}
{{- if and (default false (get $supersetSso "enabled")) (get $clientSecretCfg "name") }}
        - name: SUPERSET_OIDC_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ get $clientSecretCfg "name" | quote }}
              key: {{ default "client-secret" (get $clientSecretCfg "key") | quote }}
{{- end }}
        - name: SUPERSET_OIDC_DISCOVERY_URL
          value: {{ default "" $discoveryUrl | quote }}
        - name: SUPERSET_OIDC_USERINFO_URL
          value: {{ default "" $userInfoUrl | quote }}
        - name: SUPERSET_OIDC_LOGOUT_URL
          value: {{ default "" $logoutUrl | quote }}
        - name: SUPERSET_OIDC_REDIRECT_URI
          value: {{ default "" $redirectUri | quote }}
        - name: SUPERSET_OIDC_SCOPES
          value: {{ join " " $effectiveScopes | quote }}
        - name: SUPERSET_OIDC_GROUPS_CLAIM
          value: {{ $groupsClaim | quote }}
        - name: SUPERSET_OIDC_EMAIL_CLAIM
          value: {{ $emailClaim | quote }}
        - name: SUPERSET_OIDC_NAME_CLAIM
          value: {{ $nameClaim | quote }}
        - name: SUPERSET_OIDC_USERNAME_CLAIM
          value: {{ $usernameClaim | quote }}
        - name: SUPERSET_OIDC_ADMIN_GROUP
          value: {{ $adminGroup | quote }}
        - name: SUPERSET_OIDC_EDITOR_GROUP
          value: {{ $editorGroup | quote }}
        - name: SUPERSET_OIDC_VIEWER_GROUP
          value: {{ $viewerGroup | quote }}
        - name: SUPERSET_OIDC_TOKEN_METHOD
          value: {{ $tokenMethod | quote }}
        - name: SUPERSET_OIDC_ISSUER
          value: {{ default "" $issuerUrl | quote }}
        - name: ADMIN_USERNAME
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: ADMIN_USERNAME
        - name: ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: ADMIN_PASSWORD
        - name: ADMIN_EMAIL
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: ADMIN_EMAIL
        - name: ADMIN_FIRSTNAME
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: ADMIN_FIRSTNAME
        - name: ADMIN_LASTNAME
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: ADMIN_LASTNAME
        - name: CELERY_BROKER_URL
          value: "redis://redis-service.data-platform.svc.cluster.local:6379/2"
        - name: CELERY_RESULT_BACKEND
          value: "redis://redis-service.data-platform.svc.cluster.local:6379/3"
        - name: SUPERSET_CLICKHOUSE_URI
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: SUPERSET_CLICKHOUSE_URI
              optional: true
        - name: SUPERSET_TRINO_URI
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: SUPERSET_TRINO_URI
              optional: true
        volumeMounts:
        - name: superset-config
          mountPath: /app/superset_config.py
          subPath: superset_config.py
      volumes:
      - name: superset-config
        configMap:
          name: superset-config

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: superset-web
  namespace: data-platform
  labels:
    app: superset
    component: web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: superset
      component: web
  template:
    metadata:
      labels:
        app: superset
        component: web
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      initContainers:
      - name: wait-for-postgres
        image: busybox:1.36
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
        command:
        - sh
        - -c
        - |
          until nc -z postgres-shared-service.data-platform.svc.cluster.local 5432; do
            echo "Waiting for PostgreSQL...";
            sleep 5;
          done
      - name: wait-for-redis
        image: busybox:1.36
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
        command:
        - sh
        - -c
        - |
          until nc -z redis-service.data-platform.svc.cluster.local 6379; do
            echo "Waiting for Redis...";
            sleep 5;
          done
      containers:
      - name: superset
        image: apache/superset:3.0.0
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
        command:
        - /bin/sh
        - -c
        args:
        - |
          pip install --no-cache-dir trino pymysql >/tmp/pip-install.log 2>&1 || { cat /tmp/pip-install.log; exit 1; }
          exec gunicorn \
            --bind=0.0.0.0:8088 \
            --workers=4 \
            --threads=8 \
            --timeout=300 \
            'superset.app:create_app()'
        ports:
        - containerPort: 8088
          name: superset
        env:
        - name: SUPERSET_CONFIG_PATH
          value: "/app/superset_config.py"
        - name: FLASK_APP
          value: "superset"
        - name: PYTHONPATH
          value: "/app"
        - name: SUPERSET_HOME
          value: "/app"
        - name: PIP_ADDITIONAL_REQUIREMENTS
          value: "trino pymysql"
        - name: SUPERSET_PORT
          value: "8088"
        - name: SUPERSET_ENV
          value: "production"
        - name: SUPERSET_DISABLE_LOCAL_AUTH
          value: {{ ternary "true" "false" (default false (get $supersetSso "enabled")) | quote }}
        - name: SUPERSET_LOAD_EXAMPLES
          value: "no"
        - name: SUPERSET_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: SUPERSET_SECRET_KEY
        - name: DATABASE_URI
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: DATABASE_URI
        - name: CELERY_BROKER_URL
          value: "redis://redis-service.data-platform.svc.cluster.local:6379/2"
        - name: CELERY_RESULT_BACKEND
          value: "redis://redis-service.data-platform.svc.cluster.local:6379/3"
        - name: REDIS_HOST
          value: "redis-service.data-platform.svc.cluster.local"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_CACHE_DB
          value: "1"
        - name: REDIS_RESULTS_DB
          value: "3"
        - name: SQLLAB_ASYNC_REDIS_DB
          value: "3"
        - name: SQLLAB_ASYNC_TIME_LIMIT_SEC
          value: "3600"
        - name: SUPERSET_WEBSERVER_TIMEOUT
          value: "300"
        - name: SUPERSET_WEBSERVER_THREADS
          value: "8"
        - name: GUNICORN_TIMEOUT
          value: "300"
        - name: SUPERSET_OIDC_ENABLED
          value: {{ ternary "true" "false" (default false (get $supersetSso "enabled")) | quote }}
        - name: SUPERSET_OIDC_PROVIDER_NAME
          value: {{ default "254Carbon SSO" (get $supersetSso "providerName") | quote }}
        - name: SUPERSET_OIDC_CLIENT_ID
          value: {{ default "" (get $supersetSso "clientId") | quote }}
{{- if and (default false (get $supersetSso "enabled")) (get $clientSecretCfg "name") }}
        - name: SUPERSET_OIDC_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ get $clientSecretCfg "name" | quote }}
              key: {{ default "client-secret" (get $clientSecretCfg "key") | quote }}
{{- end }}
        - name: SUPERSET_OIDC_DISCOVERY_URL
          value: {{ default "" $discoveryUrl | quote }}
        - name: SUPERSET_OIDC_USERINFO_URL
          value: {{ default "" $userInfoUrl | quote }}
        - name: SUPERSET_OIDC_LOGOUT_URL
          value: {{ default "" $logoutUrl | quote }}
        - name: SUPERSET_OIDC_REDIRECT_URI
          value: {{ default "" $redirectUri | quote }}
        - name: SUPERSET_OIDC_SCOPES
          value: {{ join " " $effectiveScopes | quote }}
        - name: SUPERSET_OIDC_GROUPS_CLAIM
          value: {{ $groupsClaim | quote }}
        - name: SUPERSET_OIDC_EMAIL_CLAIM
          value: {{ $emailClaim | quote }}
        - name: SUPERSET_OIDC_NAME_CLAIM
          value: {{ $nameClaim | quote }}
        - name: SUPERSET_OIDC_USERNAME_CLAIM
          value: {{ $usernameClaim | quote }}
        - name: SUPERSET_OIDC_ADMIN_GROUP
          value: {{ $adminGroup | quote }}
        - name: SUPERSET_OIDC_EDITOR_GROUP
          value: {{ $editorGroup | quote }}
        - name: SUPERSET_OIDC_VIEWER_GROUP
          value: {{ $viewerGroup | quote }}
        - name: SUPERSET_OIDC_TOKEN_METHOD
          value: {{ $tokenMethod | quote }}
        - name: SUPERSET_OIDC_ISSUER
          value: {{ default "" $issuerUrl | quote }}
        volumeMounts:
        - name: superset-config
          mountPath: /app/superset_config.py
          subPath: superset_config.py
        - name: superset-logs
          mountPath: /app/logs
        resources:
          requests:
            cpu: "500m"
            memory: "1Gi"
          limits:
            cpu: "1000m"
            memory: "2Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: 8088
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /health
            port: 8088
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
      volumes:
      - name: superset-config
        configMap:
          name: superset-config
      - name: superset-logs
        emptyDir: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: superset-worker
  namespace: data-platform
  labels:
    app: superset
    component: worker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: superset
      component: worker
  template:
    metadata:
      labels:
        app: superset
        component: worker
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: superset-worker
        image: apache/superset:3.0.0
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
        command:
        - /bin/sh
        - -c
        args:
        - |
          pip install --no-cache-dir trino pymysql >/tmp/pip-install.log 2>&1 || { cat /tmp/pip-install.log; exit 1; }
          exec celery \
            --app=superset.tasks.celery_app:app \
            worker \
            --pool=prefork \
            --loglevel=INFO \
            --concurrency=4 \
            --pidfile=/app/logs/celery-worker.pid
        env:
        - name: SUPERSET_CONFIG_PATH
          value: "/app/superset_config.py"
        - name: FLASK_APP
          value: "superset"
        - name: PYTHONPATH
          value: "/app"
        - name: SUPERSET_HOME
          value: "/app"
        - name: PIP_ADDITIONAL_REQUIREMENTS
          value: "trino pymysql"
        - name: SUPERSET_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: SUPERSET_SECRET_KEY
        - name: DATABASE_URI
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: DATABASE_URI
        - name: CELERY_BROKER_URL
          value: "redis://redis-service.data-platform.svc.cluster.local:6379/2"
        - name: CELERY_RESULT_BACKEND
          value: "redis://redis-service.data-platform.svc.cluster.local:6379/3"
        - name: REDIS_HOST
          value: "redis-service.data-platform.svc.cluster.local"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_CACHE_DB
          value: "1"
        - name: REDIS_RESULTS_DB
          value: "3"
        - name: SQLLAB_ASYNC_REDIS_DB
          value: "3"
        volumeMounts:
        - name: superset-config
          mountPath: /app/superset_config.py
          subPath: superset_config.py
        - name: superset-logs
          mountPath: /app/logs
        resources:
          requests:
            cpu: "250m"
            memory: "512Mi"
          limits:
            cpu: "1000m"
            memory: "1Gi"
        livenessProbe:
          exec:
            command:
            - bash
            - -c
            - "test -s /app/logs/celery-worker.pid && kill -0 \"$(cat /app/logs/celery-worker.pid)\""
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          exec:
            command:
            - bash
            - -c
            - "test -s /app/logs/celery-worker.pid && kill -0 \"$(cat /app/logs/celery-worker.pid)\""
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
      volumes:
      - name: superset-config
        configMap:
          name: superset-config
      - name: superset-logs
        emptyDir: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: superset-beat
  namespace: data-platform
  labels:
    app: superset
    component: beat
spec:
  replicas: 1
  selector:
    matchLabels:
      app: superset
      component: beat
  template:
    metadata:
      labels:
        app: superset
        component: beat
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: superset-beat
        image: apache/superset:3.0.0
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
        command:
        - /bin/sh
        - -c
        args:
        - |
          pip install --no-cache-dir trino pymysql >/tmp/pip-install.log 2>&1 || { cat /tmp/pip-install.log; exit 1; }
          exec celery \
            --app=superset.tasks.celery_app:app \
            beat \
            --loglevel=INFO \
            --schedule=/app/logs/celerybeat-schedule \
            --pidfile=/app/logs/celery-beat.pid
        env:
        - name: SUPERSET_CONFIG_PATH
          value: "/app/superset_config.py"
        - name: FLASK_APP
          value: "superset"
        - name: PYTHONPATH
          value: "/app"
        - name: SUPERSET_HOME
          value: "/app"
        - name: SUPERSET_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: SUPERSET_SECRET_KEY
        - name: DATABASE_URI
          valueFrom:
            secretKeyRef:
              name: superset-secrets
              key: DATABASE_URI
        - name: CELERY_BROKER_URL
          value: "redis://redis-service.data-platform.svc.cluster.local:6379/2"
        - name: CELERY_RESULT_BACKEND
          value: "redis://redis-service.data-platform.svc.cluster.local:6379/3"
        - name: REDIS_HOST
          value: "redis-service.data-platform.svc.cluster.local"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_CACHE_DB
          value: "1"
        - name: REDIS_RESULTS_DB
          value: "3"
        - name: SQLLAB_ASYNC_REDIS_DB
          value: "3"
        volumeMounts:
        - name: superset-config
          mountPath: /app/superset_config.py
          subPath: superset_config.py
        - name: superset-logs
          mountPath: /app/logs
        resources:
          requests:
            cpu: "100m"
            memory: "256Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        livenessProbe:
          exec:
            command:
            - bash
            - -c
            - "test -s /app/logs/celery-beat.pid && kill -0 \"$(cat /app/logs/celery-beat.pid)\""
          initialDelaySeconds: 60
          periodSeconds: 60
          timeoutSeconds: 10
        readinessProbe:
          exec:
            command:
            - bash
            - -c
            - "test -s /app/logs/celery-beat.pid && kill -0 \"$(cat /app/logs/celery-beat.pid)\""
          initialDelaySeconds: 30
          periodSeconds: 60
          timeoutSeconds: 10
      volumes:
      - name: superset-config
        configMap:
          name: superset-config
      - name: superset-logs
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: superset
  namespace: data-platform
  labels:
    app: superset
spec:
  type: ClusterIP
  ports:
  - name: superset
    port: 8088
    targetPort: 8088
  selector:
    app: superset
    component: web

---
# Redis for Superset caching, Celery broker, and results backend
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: data-platform
  labels:
    app: redis
    component: caching
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        component: caching
    spec:
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: redis
        image: bitnami/redis:7.2-debian-12
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsUser: 1001
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop: ["ALL"]
        ports:
        - containerPort: 6379
          name: redis
        env:
        - name: ALLOW_EMPTY_PASSWORD
          value: "yes"
        - name: REDIS_DISABLE_COMMANDS
          value: "FLUSHDB,FLUSHALL"
        volumeMounts:
        - name: redis-data
          mountPath: /bitnami/redis/data
        - name: redis-tmp
          mountPath: /tmp
        - name: redis-conf
          mountPath: /opt/bitnami/redis/mounted-etc
        resources:
          limits:
            memory: "512Mi"
            cpu: "250m"
          requests:
            memory: "256Mi"
            cpu: "100m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-data
        emptyDir: {}
      - name: redis-tmp
        emptyDir: {}
      - name: redis-conf
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: data-platform
  labels:
    app: redis
spec:
  type: ClusterIP
  selector:
    app: redis
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
