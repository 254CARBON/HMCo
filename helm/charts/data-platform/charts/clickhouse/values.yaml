# ClickHouse Configuration
replicaCount: 1

image:
  repository: clickhouse/clickhouse-server
  tag: "24.8.7"
  pullPolicy: IfNotPresent

# ClickHouse configuration
clickhouse:
  # Server settings
  server:
    # HTTP interface
    httpPort: 8123
    # TCP interface
    tcpPort: 9000
    # Inter-server communication
    interPort: 9009

  # Database settings
  databases:
    - name: default
      engine: Atomic

  # Storage settings
  storage:
    dataPath: "/var/lib/clickhouse"
    logsPath: "/var/log/clickhouse-server"
    
  # Data retention policies
  # TTL (Time To Live) policies for automatic data lifecycle management
  retention:
    # Default retention policy (can be overridden per table)
    enabled: true
    # Default retention period: 90 days
    defaultTTL: "90 DAY"
    # Cleanup interval for expired data
    cleanupInterval: "1 HOUR"
    # Retention policies by data type
    policies:
      # Raw data: 30 days retention
      - name: "raw_data"
        ttl: "30 DAY"
        description: "Raw event data and logs"
      # Aggregated data: 1 year retention
      - name: "aggregated_data"
        ttl: "365 DAY"
        description: "Pre-aggregated metrics and reports"
      # Archive data: 7 years retention (compliance)
      - name: "archive_data"
        ttl: "2555 DAY"
        description: "Long-term archived data for compliance"

  # Security settings
  security:
    enableSSL: false
    allowEmptyPassword: false
    # Note: In production, password should be provided via Kubernetes Secret
    # kubectl create secret generic clickhouse-password --from-literal=password=<secure-password>
    defaultPassword: "ClickHouse@254Carbon2025"
    
  # Encryption settings
  encryption:
    # Encryption at rest for ClickHouse data
    # ClickHouse supports encryption via encrypted disks
    enabled: true
    # Algorithm: AES-128-CTR or AES-256-CTR
    algorithm: "AES-256-CTR"
    # Key management: environment variable or external KMS
    keySource: "environment"
    # For production, use external KMS (Vault, AWS KMS, etc.)
    # keySource: "vault"
    # vaultPath: "secret/clickhouse/encryption-key"

# Service Account
serviceAccount:
  create: true
  name: ""

# Kubernetes resources
resources:
  requests:
    cpu: 2000m
    memory: 4Gi
  limits:
    cpu: 4000m
    memory: 8Gi

# Persistent volume configuration
persistence:
  enabled: true
  # Use encrypted-local-path for production to ensure encryption at rest
  # For non-production: local-path
  storageClass: local-path  # TODO: Change to encrypted-local-path in production
  size: 100Gi
  accessModes:
    - ReadWriteOnce
  # Encryption at rest (when supported by storage class)
  encryption:
    enabled: true
    # Storage class should support encryption (e.g., encrypted-gp3, encrypted-local-path)
    # For cloud providers: use encrypted storage classes (encrypted-gp3, encrypted-ebs, etc.)
    # For on-prem: use LUKS or dm-crypt at the volume level
    storageClassEncrypted: encrypted-local-path
    annotations:
      # Kubernetes annotation to request encrypted volume
      volume.beta.kubernetes.io/storage-class: encrypted-local-path

# Service configuration
service:
  type: ClusterIP
  httpPort: 8123
  tcpPort: 9000
  interPort: 9009

# Ingress configuration
ingress:
  enabled: true
  className: nginx
  hostname: clickhouse.254carbon.com
  tls: true
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "1g"

# Security context
securityContext:
  runAsUser: 101
  runAsGroup: 101
  fsGroup: 101

# Pod security context
podSecurityContext:
  fsGroup: 101

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Service monitor for Prometheus
serviceMonitor:
  enabled: true
  namespace: monitoring
  labels: {}
  annotations: {}

# Configuration for external integrations
integrations:
  superset:
    enabled: true
    uri: "clickhouse://clickhouse-service.data-platform:9000/default"
  trino:
    enabled: true
    catalog: clickhouse_catalog
