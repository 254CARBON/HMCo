---
# MinIO bucket initialization job
# This job creates required S3 buckets for Iceberg, SeaTunnel, and DataHub
apiVersion: batch/v1
kind: Job
metadata:
  name: minio-init-buckets
  namespace: data-platform
  labels:
    app: minio
    component: storage
spec:
  backoffLimit: 3
  completions: 1
  parallelism: 1
  ttlSecondsAfterFinished: 600
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: minio-init
        image: minio/mc:latest
        env:
        - name: MC_HOST_minio
          value: "http://minioadmin:minioadmin123@minio-service:9000"
        command:
        - /bin/sh
        - -c
        - |
          set -e
          
          echo "Waiting for MinIO to be ready..."
          until mc alias list minio > /dev/null 2>&1; do
            echo "Waiting for MinIO connection..."
            sleep 2
          done
          
          echo "MinIO is ready!"
          
          # Create required buckets
          echo "Creating bucket: hmco-raw"
          mc mb --ignore-existing minio/hmco-raw
          
          echo "Creating bucket: hmco-staged"
          mc mb --ignore-existing minio/hmco-staged
          
          echo "Creating bucket: hmco-curated"
          mc mb --ignore-existing minio/hmco-curated
          
          echo "Creating bucket: hmco-ml"
          mc mb --ignore-existing minio/hmco-ml
          
          echo "Creating bucket: hmco-backup"
          mc mb --ignore-existing minio/hmco-backup
          
          # Legacy buckets for backward compatibility
          echo "Creating bucket: iceberg-warehouse"
          mc mb --ignore-existing minio/iceberg-warehouse
          
          echo "Creating bucket: seatunnel-output"
          mc mb --ignore-existing minio/seatunnel-output
          
          echo "Creating bucket: datahub-storage"
          mc mb --ignore-existing minio/datahub-storage
          
          echo "Creating bucket: lakefs-data"
          mc mb --ignore-existing minio/lakefs-data
          
          # Set bucket policies (least privilege)
          echo "Setting bucket policies..."
          
          # ETL writer policy: write to raw and staged only
          cat > /tmp/etl-writer-policy.json <<'EOF'
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": ["s3:PutObject", "s3:GetObject"],
                "Resource": ["arn:aws:s3:::hmco-raw/*", "arn:aws:s3:::hmco-staged/*"]
              },
              {
                "Effect": "Allow",
                "Action": ["s3:ListBucket"],
                "Resource": ["arn:aws:s3:::hmco-raw", "arn:aws:s3:::hmco-staged"]
              }
            ]
          }
          EOF
          
          # BI reader policy: read curated only
          cat > /tmp/bi-reader-policy.json <<'EOF'
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": ["s3:GetObject"],
                "Resource": ["arn:aws:s3:::hmco-curated/*"]
              },
              {
                "Effect": "Allow",
                "Action": ["s3:ListBucket"],
                "Resource": ["arn:aws:s3:::hmco-curated"]
              }
            ]
          }
          EOF
          
          # Apply policies (commented out - requires MinIO admin credentials)
          # mc admin policy create minio etl-writer /tmp/etl-writer-policy.json || true
          # mc admin policy create minio bi-reader /tmp/bi-reader-policy.json || true
          
          # Set default public read for curated (for BI tools)
          mc anonymous set download minio/hmco-curated || true
          
          echo "All buckets initialized successfully!"
          echo ""
          echo "Bucket summary:"
          mc ls minio/
        resources:
          limits:
            memory: "256Mi"
            cpu: "250m"
          requests:
            memory: "128Mi"
            cpu: "100m"
      serviceAccountName: default
