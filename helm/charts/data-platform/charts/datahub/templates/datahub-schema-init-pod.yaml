# DataHub Schema Initialization Pod
# Simple pod that runs GMS once to initialize database schema
{{- $kafkaVals := default (dict) .Values.kafka }}
{{- $bootstrap := default "kafka-service:9092" (get $kafkaVals "bootstrapServers") }}
{{- $schemaReg := default "http://schema-registry-service:8081" (get $kafkaVals "schemaRegistryUrl") }}
{{- $securityVals := default (dict) (get $kafkaVals "security") }}
{{- $protocol := upper (default "PLAINTEXT" (get $securityVals "protocol")) }}
{{- $tlsVals := default (dict) (get $securityVals "tls") }}
{{- $tlsConfig := dict }}
{{- if hasKey $tlsVals "enabled" }}
{{- $_ := set $tlsConfig "enabled" (get $tlsVals "enabled") }}
{{- else }}
{{- $_ := set $tlsConfig "enabled" (eq $protocol "SSL") }}
{{- end }}
{{- $_ := set $tlsConfig "secretName" (default "kafka-datahub-tls" (get $tlsVals "secretName")) }}
{{- $_ := set $tlsConfig "passwordKey" (default "user.password" (get $tlsVals "passwordKey")) }}
{{- $_ := set $tlsConfig "keystorePath" (default "/etc/kafka/secrets/user.p12" (get $tlsVals "keystorePath")) }}
{{- $_ := set $tlsConfig "truststorePath" (default "/etc/kafka/secrets/user.p12" (get $tlsVals "truststorePath")) }}
{{- $_ := set $tlsConfig "mountPath" (default "/etc/kafka/secrets" (get $tlsVals "mountPath")) }}
{{- $kafkaBootstrap := $bootstrap }}
{{- $schemaRegistryUrl := $schemaReg }}
{{- $kafkaProtocol := $protocol }}
{{- $kafkaTlsEnabled := get $tlsConfig "enabled" }}
{{- $kafkaSecretName := get $tlsConfig "secretName" }}
{{- $kafkaPasswordKey := get $tlsConfig "passwordKey" }}
{{- $kafkaKeystorePath := get $tlsConfig "keystorePath" }}
{{- $kafkaTruststorePath := get $tlsConfig "truststorePath" }}
{{- $kafkaMountPath := get $tlsConfig "mountPath" }}
apiVersion: v1
kind: Pod
metadata:
  name: datahub-schema-init
  namespace: data-platform
  labels:
    app: datahub-schema-init
spec:
  restartPolicy: Never
  dnsPolicy: ClusterFirst
  dnsConfig:
    options:
    - name: ndots
      value: "1"
  containers:
  - name: datahub-gms
    image: acryldata/datahub-gms:head
    imagePullPolicy: IfNotPresent
    env:
    - name: DATAHUB_GMS_HOST
      value: "0.0.0.0"
    - name: DATAHUB_GMS_PORT
      value: "8080"
    - name: DATAHUB_SERVER_TYPE
      value: "quickstart"
    - name: JAVA_OPTS
      value: "-Xms512m -Xmx1024m"
    - name: DATAHUB_SECRET
      valueFrom:
        secretKeyRef:
          name: datahub-secret
          key: DATAHUB_SECRET
    - name: EBEAN_DATASOURCE_HOST
      value: "postgres-shared-service:5432"
    - name: EBEAN_DATASOURCE_URL
      value: "jdbc:postgresql://postgres-shared-service:5432/datahub"
    - name: EBEAN_DATASOURCE_USERNAME
      value: "datahub"
    - name: EBEAN_DATASOURCE_PASSWORD
      valueFrom:
        secretKeyRef:
          name: postgres-shared-secret
          key: password
    - name: EBEAN_DATASOURCE_DRIVER
      value: "org.postgresql.Driver"
    - name: NEO4J_HOST
      value: "graphdb-service:7474"
    - name: NEO4J_URI
      value: "bolt://graphdb-service:7687"
    - name: NEO4J_USERNAME
      value: "neo4j"
    - name: NEO4J_PASSWORD
      value: "datahub_password"
    - name: ELASTICSEARCH_HOST
      value: "elasticsearch-service"
    - name: ELASTICSEARCH_PORT
      value: "9200"
    - name: KAFKA_BOOTSTRAP_SERVER
      value: {{ $kafkaBootstrap | quote }}
    - name: KAFKA_BOOTSTRAP_SERVERS
      value: {{ $kafkaBootstrap | quote }}
    - name: SPRING_KAFKA_PROPERTIES_SECURITY_PROTOCOL
      value: {{ $kafkaProtocol | quote }}
{{- if $kafkaTlsEnabled }}
    - name: SPRING_KAFKA_PROPERTIES_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM
      value: ""
    - name: SPRING_KAFKA_PROPERTIES_SSL_TRUSTSTORE_TYPE
      value: "PKCS12"
    - name: SPRING_KAFKA_PROPERTIES_SSL_KEYSTORE_TYPE
      value: "PKCS12"
    - name: SPRING_KAFKA_PROPERTIES_SSL_TRUSTSTORE_LOCATION
      value: {{ $kafkaTruststorePath | quote }}
    - name: SPRING_KAFKA_PROPERTIES_SSL_KEYSTORE_LOCATION
      value: {{ $kafkaKeystorePath | quote }}
    - name: SPRING_KAFKA_PROPERTIES_SSL_TRUSTSTORE_PASSWORD
      valueFrom:
        secretKeyRef:
          name: {{ $kafkaSecretName | quote }}
          key: {{ $kafkaPasswordKey | quote }}
    - name: SPRING_KAFKA_PROPERTIES_SSL_KEYSTORE_PASSWORD
      valueFrom:
        secretKeyRef:
          name: {{ $kafkaSecretName | quote }}
          key: {{ $kafkaPasswordKey | quote }}
    - name: SPRING_KAFKA_PROPERTIES_SSL_KEY_PASSWORD
      valueFrom:
        secretKeyRef:
          name: {{ $kafkaSecretName | quote }}
          key: {{ $kafkaPasswordKey | quote }}
{{- end }}
    - name: KAFKA_SCHEMAREGISTRY_URL
      value: {{ $schemaRegistryUrl | quote }}
    - name: SKIP_ELASTICSEARCH_CHECK
      value: "false"
    - name: SKIP_KAFKA_CHECK
      value: "false"
{{- if $kafkaTlsEnabled }}
    volumeMounts:
    - name: kafka-client-cert
      mountPath: {{ $kafkaMountPath | quote }}
      readOnly: true
{{- end }}
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        cpu: "1"
        memory: 2Gi
{{- if $kafkaTlsEnabled }}
  volumes:
  - name: kafka-client-cert
    secret:
      secretName: {{ $kafkaSecretName | quote }}
      defaultMode: 0400
{{- end }}
