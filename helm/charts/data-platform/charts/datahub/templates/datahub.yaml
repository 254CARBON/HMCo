{{- $globalVals := default (dict) .Values.global -}}
{{- $globalSso := default (dict) (get $globalVals "sso") -}}
{{- $datahubVals := default (dict) .Values -}}
{{- $datahubSso := default (dict) (get $datahubVals "sso") -}}
{{- $defaultScopes := list "openid" "profile" "email" -}}
{{- $scopesCandidate := default (get $globalSso "scopes") (get $datahubSso "scopes") -}}
{{- $effectiveScopes := default $defaultScopes $scopesCandidate -}}
{{- $claimMappings := default (dict) (get $globalSso "claimMappings") -}}
{{- $groupsClaim := default "groups" (get $claimMappings "groups") -}}
{{- $emailClaim := default "email" (get $claimMappings "email") -}}
{{- $nameClaim := default "name" (get $claimMappings "name") -}}
{{- $usernameClaim := default $emailClaim (get $datahubSso "usernameClaim") -}}
{{- $datahubClientSecret := default (dict) (get $datahubSso "clientSecretSecret") -}}
{{- $discoveryUrl := default (get $globalSso "discoveryUrl") (get $datahubSso "discoveryUrl") -}}
{{- $logoutUrl := default (get $globalSso "logoutUrl") (get $datahubSso "logoutUrl") -}}
{{- $issuerUrl := default (get $globalSso "issuerUrl") (get $datahubSso "issuerUrl") -}}
{{- $baseUrl := default "" (get $datahubSso "baseUrl") -}}
{{- $redirectUri := default "" (get $datahubSso "redirectUri") -}}
{{- $extractGroups := default true (get $datahubSso "extractGroups") -}}
{{- $kafkaVals := default (dict) .Values.kafka -}}
{{- $kafkaConfig := dict -}}
{{- $bootstrap := default "kafka-service:9092" (get $kafkaVals "bootstrapServers") -}}
{{- $_ := set $kafkaConfig "bootstrap" $bootstrap -}}
{{- $schemaReg := default "http://schema-registry-service:8081" (get $kafkaVals "schemaRegistryUrl") -}}
{{- $_ := set $kafkaConfig "schemaRegistryUrl" $schemaReg -}}
{{- $securityVals := default (dict) (get $kafkaVals "security") -}}
{{- $protocol := upper (default "PLAINTEXT" (get $securityVals "protocol")) -}}
{{- $_ := set $kafkaConfig "protocol" $protocol -}}
{{- $tlsVals := default (dict) (get $securityVals "tls") -}}
{{- $tlsConfig := dict -}}
{{- if hasKey $tlsVals "enabled" -}}
{{- $_ := set $tlsConfig "enabled" (get $tlsVals "enabled") -}}
{{- else -}}
{{- $_ := set $tlsConfig "enabled" (eq $protocol "SSL") -}}
{{- end -}}
{{- $_ := set $tlsConfig "secretName" (default "kafka-datahub-tls" (get $tlsVals "secretName")) -}}
{{- $_ := set $tlsConfig "passwordKey" (default "user.password" (get $tlsVals "passwordKey")) -}}
{{- $_ := set $tlsConfig "keystorePath" (default "/etc/kafka/secrets/user.p12" (get $tlsVals "keystorePath")) -}}
{{- $_ := set $tlsConfig "truststorePath" (default "/etc/kafka/secrets/user.p12" (get $tlsVals "truststorePath")) -}}
{{- $_ := set $tlsConfig "mountPath" (default "/etc/kafka/secrets" (get $tlsVals "mountPath")) -}}
{{- $_ := set $kafkaConfig "tls" $tlsConfig -}}
{{- $kafkaBootstrap := get $kafkaConfig "bootstrap" -}}
{{- $schemaRegistryUrl := get $kafkaConfig "schemaRegistryUrl" -}}
{{- $kafkaProtocol := get $kafkaConfig "protocol" -}}
{{- $kafkaTls := get $kafkaConfig "tls" -}}
{{- $kafkaTlsEnabled := get $kafkaTls "enabled" -}}
{{- $kafkaSecretName := get $kafkaTls "secretName" -}}
{{- $kafkaPasswordKey := get $kafkaTls "passwordKey" -}}
{{- $kafkaKeystorePath := get $kafkaTls "keystorePath" -}}
{{- $kafkaTruststorePath := get $kafkaTls "truststorePath" -}}
{{- $kafkaMountPath := get $kafkaTls "mountPath" -}}

# DataHub deployment with all core services
# This includes GMS, Frontend, MAE, and MCE consumers

---
# DataHub GMS (Graph Metadata Service)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: datahub-gms
  namespace: data-platform
  labels:
    app: datahub-gms
    component: metadata-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: datahub-gms
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: datahub-gms
        component: metadata-service
    spec:
      # Fix DNS resolution issues by using ClusterFirst with ndots configuration
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "1"
        - name: timeout
          value: "5"
        - name: attempts
          value: "3"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - datahub-gms
              topologyKey: kubernetes.io/hostname
      imagePullSecrets: []
      containers:
      - name: datahub-gms
        image: acryldata/datahub-gms:head
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: gms
        env:
        - name: DATAHUB_GMS_HOST
          value: "0.0.0.0"
        - name: DATAHUB_GMS_PORT
          value: "8080"
        - name: DATAHUB_SERVER_TYPE
          value: "quickstart"
        - name: JAVA_OPTS
          value: "-Xms512m -Xmx1024m"
        - name: DATAHUB_SECRET
          valueFrom:
            secretKeyRef:
              name: datahub-secret
              key: DATAHUB_SECRET
        - name: AUTH_JAAS_ENABLED
          value: "false"
        - name: METADATA_SERVICE_AUTH_ENABLED
          value: {{ ternary "true" "false" (default false (get $datahubSso "enabled")) | quote }}
        - name: AUTH_NATIVE_ENABLED
          value: {{ ternary "false" "true" (default false (get $datahubSso "enabled")) | quote }}
        - name: AUTH_OIDC_ENABLED
          value: {{ ternary "true" "false" (default false (get $datahubSso "enabled")) | quote }}
        - name: AUTH_OIDC_CLIENT_ID
          value: {{ default "" (get $datahubSso "clientId") | quote }}
{{- if and (default false (get $datahubSso "enabled")) (get $datahubClientSecret "name") }}
        - name: AUTH_OIDC_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ get $datahubClientSecret "name" | quote }}
              key: {{ default "client-secret" (get $datahubClientSecret "key") | quote }}
{{- end }}
        - name: AUTH_OIDC_DISCOVERY_URI
          value: {{ default "" $discoveryUrl | quote }}
        - name: AUTH_OIDC_BASE_URL
          value: {{ default "" $baseUrl | quote }}
        - name: AUTH_OIDC_REDIRECT_URI
          value: {{ default "" $redirectUri | quote }}
        - name: AUTH_OIDC_LOGOUT_URL
          value: {{ default "" $logoutUrl | quote }}
        - name: AUTH_OIDC_SCOPE
          value: {{ join " " $effectiveScopes | quote }}
        - name: AUTH_OIDC_USER_NAME_CLAIM
          value: {{ $usernameClaim | quote }}
        - name: AUTH_OIDC_GROUPS_CLAIM
          value: {{ $groupsClaim | quote }}
        - name: AUTH_OIDC_JIT_PROVISIONING_ENABLED
          value: "true"
        - name: AUTH_OIDC_PRE_PROVISIONING_REQUIRED
          value: "false"
        - name: AUTH_OIDC_EXTRACT_GROUPS_ENABLED
          value: {{ ternary "true" "false" $extractGroups | quote }}
        - name: AUTH_OIDC_ISSUER
          value: {{ default "" $issuerUrl | quote }}
        - name: DATAHUB_ANALYTICS_ENABLED
          value: "true"
        - name: EBEAN_DATASOURCE_HOST
          value: "postgres-shared-service:5432"
        - name: EBEAN_DATASOURCE_PORT
          value: "5432"
        - name: EBEAN_DATASOURCE_URL
          value: "jdbc:postgresql://postgres-shared-service:5432/datahub"
        - name: EBEAN_DATASOURCE_USERNAME
          value: "datahub"
        - name: EBEAN_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-shared-secret
              key: password
        - name: EBEAN_DATASOURCE_DRIVER
          value: "org.postgresql.Driver"
        - name: NEO4J_HOST
          value: "graphdb-service:7474"
        - name: NEO4J_URI
          value: "bolt://graphdb-service:7687"
        - name: NEO4J_USERNAME
          value: "neo4j"
        - name: NEO4J_PASSWORD
          value: "datahub_password"
        - name: ELASTICSEARCH_HOST
          value: "elasticsearch-service"
        - name: ELASTICSEARCH_PORT
          value: "9200"
        - name: ENTITY_REGISTRY_CONFIG_PATH
          value: "/datahub/datahub-gms/resources/entity-registry.yml"
        - name: AWS_REGION
          value: "us-east-1"
        - name: AWS_ENDPOINT_URL
          value: "http://minio-service:9000"
        - name: S3_ENDPOINT
          value: "http://minio-service:9000"
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: minio-secret
              key: access-key
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: minio-secret
              key: secret-key
        - name: KAFKA_BOOTSTRAP_SERVER
          value: {{ $kafkaBootstrap | quote }}
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: {{ $kafkaBootstrap | quote }}
        - name: SPRING_KAFKA_PROPERTIES_SECURITY_PROTOCOL
          value: {{ $kafkaProtocol | quote }}
{{- if $kafkaTlsEnabled }}
        - name: SPRING_KAFKA_PROPERTIES_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM
          value: ""
        - name: SPRING_KAFKA_PROPERTIES_SSL_TRUSTSTORE_TYPE
          value: "PKCS12"
        - name: SPRING_KAFKA_PROPERTIES_SSL_KEYSTORE_TYPE
          value: "PKCS12"
        - name: SPRING_KAFKA_PROPERTIES_SSL_TRUSTSTORE_LOCATION
          value: {{ $kafkaTruststorePath | quote }}
        - name: SPRING_KAFKA_PROPERTIES_SSL_KEYSTORE_LOCATION
          value: {{ $kafkaKeystorePath | quote }}
        - name: SPRING_KAFKA_PROPERTIES_SSL_TRUSTSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ $kafkaSecretName | quote }}
              key: {{ $kafkaPasswordKey | quote }}
        - name: SPRING_KAFKA_PROPERTIES_SSL_KEYSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ $kafkaSecretName | quote }}
              key: {{ $kafkaPasswordKey | quote }}
        - name: SPRING_KAFKA_PROPERTIES_SSL_KEY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ $kafkaSecretName | quote }}
              key: {{ $kafkaPasswordKey | quote }}
{{- end }}
        - name: KAFKA_SCHEMAREGISTRY_URL
          value: {{ $schemaRegistryUrl | quote }}
        - name: KAFKA_SCHEMA_REGISTRY_URL
          value: {{ $schemaRegistryUrl | quote }}
        - name: SCHEMA_REGISTRY_URL
          value: {{ $schemaRegistryUrl | quote }}
        - name: SYSTEM_TELEMETRY_ENABLED
          value: "false"
        - name: DATAHUB_TELEMETRY_ENABLED
          value: "false"
        - name: OTEL_SDK_DISABLED
          value: "true"
        - name: SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET
          value: "earliest"
{{- if $kafkaTlsEnabled }}
        volumeMounts:
        - name: kafka-client-cert
          mountPath: {{ $kafkaMountPath | quote }}
          readOnly: true
{{- end }}
        resources:
          limits:
            memory: "2Gi"
            cpu: "1000m"
          requests:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /config
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 10
        readinessProbe:
          httpGet:
            path: /config
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
{{- if $kafkaTlsEnabled }}
      volumes:
      - name: kafka-client-cert
        secret:
          secretName: {{ $kafkaSecretName | quote }}
          defaultMode: 0400
{{- end }}
---
# DataHub GMS Service
apiVersion: v1
kind: Service
metadata:
  name: datahub-gms
  namespace: data-platform
  labels:
    app: datahub-gms
spec:
  ports:
  - port: 8080
    targetPort: 8080
    name: gms
  selector:
    app: datahub-gms
  type: ClusterIP

---
# DataHub Frontend
apiVersion: apps/v1
kind: Deployment
metadata:
  name: datahub-frontend
  namespace: data-platform
  labels:
    app: datahub-frontend
    component: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: datahub-frontend
  template:
    metadata:
      labels:
        app: datahub-frontend
        component: frontend
    spec:
      imagePullSecrets: []
      containers:
      - name: datahub-frontend
        image: acryldata/datahub-frontend-react:head
        ports:
        - containerPort: 9002
          name: frontend
        env:
        - name: DATAHUB_SECRET
          valueFrom:
            secretKeyRef:
              name: datahub-secret
              key: DATAHUB_SECRET
        - name: AUTH_JAAS_ENABLED
          value: "false"
        - name: AUTH_OIDC_ENABLED
          value: {{ ternary "true" "false" (default false (get $datahubSso "enabled")) | quote }}
        - name: METADATA_SERVICE_AUTH_ENABLED
          value: {{ ternary "true" "false" (default false (get $datahubSso "enabled")) | quote }}
        - name: AUTH_NATIVE_ENABLED
          value: {{ ternary "false" "true" (default false (get $datahubSso "enabled")) | quote }}
        - name: AUTH_OIDC_CLIENT_ID
          value: {{ default "" (get $datahubSso "clientId") | quote }}
{{- if and (default false (get $datahubSso "enabled")) (get $datahubClientSecret "name") }}
        - name: AUTH_OIDC_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ get $datahubClientSecret "name" | quote }}
              key: {{ default "client-secret" (get $datahubClientSecret "key") | quote }}
{{- end }}
        - name: AUTH_OIDC_DISCOVERY_URI
          value: {{ default "" $discoveryUrl | quote }}
        - name: AUTH_OIDC_BASE_URL
          value: {{ default "" $baseUrl | quote }}
        - name: AUTH_OIDC_REDIRECT_URI
          value: {{ default "" $redirectUri | quote }}
        - name: AUTH_OIDC_LOGOUT_URL
          value: {{ default "" $logoutUrl | quote }}
        - name: AUTH_OIDC_SCOPE
          value: {{ join " " $effectiveScopes | quote }}
        - name: AUTH_OIDC_USER_NAME_CLAIM
          value: {{ $usernameClaim | quote }}
        - name: AUTH_OIDC_GROUPS_CLAIM
          value: {{ $groupsClaim | quote }}
        - name: AUTH_OIDC_EXTRACT_GROUPS_ENABLED
          value: {{ ternary "true" "false" $extractGroups | quote }}
        - name: AUTH_OIDC_JIT_PROVISIONING_ENABLED
          value: "true"
        - name: AUTH_OIDC_PRE_PROVISIONING_REQUIRED
          value: "false"
        - name: DATAHUB_APP_VERSION
          value: "head"
        - name: DATAHUB_GMS_HOST
          value: "datahub-gms"
        - name: DATAHUB_GMS_PORT
          value: "8080"
        - name: REACT_APP_DATAHUB_GMS_HOST
          value: "datahub-gms"
        - name: REACT_APP_DATAHUB_GMS_PORT
          value: "8080"
        - name: REACT_APP_SERVER_HOST
          value: "0.0.0.0"
        - name: REACT_APP_SERVER_PORT
          value: "9002"
        - name: JAVA_OPTS
          value: "-Dcom.sun.jndi.ldap.connect.pool=false"
        resources:
          limits:
            memory: "1Gi"
            cpu: "500m"
          requests:
            memory: "512Mi"
            cpu: "250m"
        livenessProbe:
          httpGet:
            path: /
            port: 9002
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: 9002
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
---
# DataHub Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: datahub-frontend
  namespace: data-platform
  labels:
    app: datahub-frontend
spec:
  ports:
  - port: 9002
    targetPort: 9002
    name: frontend
  selector:
    app: datahub-frontend
  type: ClusterIP

---
# DataHub MAE Consumer (Metadata Audit Events)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: datahub-mae-consumer
  namespace: data-platform
  labels:
    app: datahub-mae-consumer
    component: mae-consumer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: datahub-mae-consumer
  template:
    metadata:
      labels:
        app: datahub-mae-consumer
        component: mae-consumer
    spec:
      imagePullSecrets: []
      containers:
      - name: datahub-mae-consumer
        image: acryldata/datahub-mae-consumer:head
        env:
        - name: DATAHUB_GMS_HOST
          value: "datahub-gms"
        - name: DATAHUB_GMS_PORT
          value: "8080"
        - name: KAFKA_BOOTSTRAP_SERVER
          value: {{ $kafkaBootstrap | quote }}
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: {{ $kafkaBootstrap | quote }}
        - name: SPRING_KAFKA_PROPERTIES_SECURITY_PROTOCOL
          value: {{ $kafkaProtocol | quote }}
{{- if $kafkaTlsEnabled }}
        - name: SPRING_KAFKA_PROPERTIES_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM
          value: ""
        - name: SPRING_KAFKA_PROPERTIES_SSL_TRUSTSTORE_TYPE
          value: "PKCS12"
        - name: SPRING_KAFKA_PROPERTIES_SSL_KEYSTORE_TYPE
          value: "PKCS12"
        - name: SPRING_KAFKA_PROPERTIES_SSL_TRUSTSTORE_LOCATION
          value: {{ $kafkaTruststorePath | quote }}
        - name: SPRING_KAFKA_PROPERTIES_SSL_KEYSTORE_LOCATION
          value: {{ $kafkaKeystorePath | quote }}
        - name: SPRING_KAFKA_PROPERTIES_SSL_TRUSTSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ $kafkaSecretName | quote }}
              key: {{ $kafkaPasswordKey | quote }}
        - name: SPRING_KAFKA_PROPERTIES_SSL_KEYSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ $kafkaSecretName | quote }}
              key: {{ $kafkaPasswordKey | quote }}
        - name: SPRING_KAFKA_PROPERTIES_SSL_KEY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ $kafkaSecretName | quote }}
              key: {{ $kafkaPasswordKey | quote }}
{{- end }}
        - name: ELASTICSEARCH_HOST
          value: "elasticsearch-service"
        - name: ELASTICSEARCH_PORT
          value: "9200"
        - name: ELASTICSEARCH_INDEX
          value: "datahub_usage_event"
        - name: NEO4J_HOST
          value: "neo4j-0.graphdb-headless:7474"
        - name: NEO4J_URI
          value: "bolt://neo4j-0.graphdb-headless:7687"
        - name: AWS_REGION
          value: "us-east-1"
        - name: AWS_ENDPOINT_URL
          value: "http://minio-service:9000"
        - name: S3_ENDPOINT
          value: "http://minio-service:9000"
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: minio-secret
              key: access-key
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: minio-secret
              key: secret-key
        volumeMounts:
        - name: runtime-tmp
          mountPath: /tmp
        - name: runtime-tmp
          mountPath: /var/tmp
{{- if $kafkaTlsEnabled }}
        - name: kafka-client-cert
          mountPath: {{ $kafkaMountPath | quote }}
          readOnly: true
{{- end }}
        resources:
          limits:
            memory: "1Gi"
            cpu: "500m"
          requests:
            memory: "512Mi"
            cpu: "250m"
      volumes:
      - name: runtime-tmp
        emptyDir: {}
{{- if $kafkaTlsEnabled }}
      - name: kafka-client-cert
        secret:
          secretName: {{ $kafkaSecretName | quote }}
          defaultMode: 0400
{{- end }}
---
# DataHub MAE Consumer Service
apiVersion: v1
kind: Service
metadata:
  name: datahub-mae-consumer
  namespace: data-platform
  labels:
    app: datahub-mae-consumer
spec:
  ports:
  - port: 9090
    targetPort: 9090
    name: mae-consumer
  selector:
    app: datahub-mae-consumer
  type: ClusterIP

---
# DataHub MCE Consumer (Metadata Change Events)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: datahub-mce-consumer
  namespace: data-platform
  labels:
    app: datahub-mce-consumer
    component: mce-consumer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: datahub-mce-consumer
  template:
    metadata:
      labels:
        app: datahub-mce-consumer
        component: mce-consumer
    spec:
      # Fix DNS resolution issues
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "1"
        - name: timeout
          value: "5"
        - name: attempts
          value: "3"
      imagePullSecrets: []
      containers:
      - name: datahub-mce-consumer
        image: acryldata/datahub-mce-consumer:head
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9090
        env:
        - name: KAFKA_BOOTSTRAP_SERVER
          value: {{ $kafkaBootstrap | quote }}
        - name: DATAHUB_GMS_HOST
          value: "datahub-gms"
        - name: DATAHUB_GMS_PORT
          value: "8080"
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: {{ $kafkaBootstrap | quote }}
        - name: SPRING_KAFKA_PROPERTIES_SECURITY_PROTOCOL
          value: {{ $kafkaProtocol | quote }}
{{- if $kafkaTlsEnabled }}
        - name: SPRING_KAFKA_PROPERTIES_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM
          value: ""
        - name: SPRING_KAFKA_PROPERTIES_SSL_TRUSTSTORE_TYPE
          value: "PKCS12"
        - name: SPRING_KAFKA_PROPERTIES_SSL_KEYSTORE_TYPE
          value: "PKCS12"
        - name: SPRING_KAFKA_PROPERTIES_SSL_TRUSTSTORE_LOCATION
          value: {{ $kafkaTruststorePath | quote }}
        - name: SPRING_KAFKA_PROPERTIES_SSL_KEYSTORE_LOCATION
          value: {{ $kafkaKeystorePath | quote }}
        - name: SPRING_KAFKA_PROPERTIES_SSL_TRUSTSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ $kafkaSecretName | quote }}
              key: {{ $kafkaPasswordKey | quote }}
        - name: SPRING_KAFKA_PROPERTIES_SSL_KEYSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ $kafkaSecretName | quote }}
              key: {{ $kafkaPasswordKey | quote }}
        - name: SPRING_KAFKA_PROPERTIES_SSL_KEY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ $kafkaSecretName | quote }}
              key: {{ $kafkaPasswordKey | quote }}
{{- end }}
        - name: KAFKA_SCHEMAREGISTRY_URL
          value: {{ $schemaRegistryUrl | quote }}
        - name: ELASTICSEARCH_HOST
          value: "elasticsearch-service"
        - name: ELASTICSEARCH_PORT
          value: "9200"
        - name: EBEAN_DATASOURCE_HOST
          value: "postgres-shared-service:5432"
        - name: EBEAN_DATASOURCE_PORT
          value: "5432"
        - name: EBEAN_DATASOURCE_URL
          value: "jdbc:postgresql://postgres-shared-service:5432/datahub"
        - name: EBEAN_DATASOURCE_USERNAME
          value: "datahub"
        - name: EBEAN_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-shared-secret
              key: password
        - name: EBEAN_DATASOURCE_DRIVER
          value: "org.postgresql.Driver"
        - name: DATAHUB_PRODUCER_ENABLED
          value: "true"
        - name: DATAHUB_PRODUCER_MCLEVEL
          value: "FINE"
        - name: DATAHUB_JVM_OPTS
          value: "-Xms512m -Xmx1024m"
        - name: AWS_REGION
          value: "us-east-1"
        - name: AWS_ENDPOINT_URL
          value: "http://minio-service:9000"
        - name: S3_ENDPOINT
          value: "http://minio-service:9000"
        - name: ENTITY_REGISTRY_CONFIG_PATH
          value: "/datahub/datahub-mce-consumer/resources/entity-registry.yml"
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: minio-secret
              key: access-key
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: minio-secret
              key: secret-key
        volumeMounts:
        - name: runtime-tmp
          mountPath: /tmp
        - name: runtime-tmp
          mountPath: /var/tmp
{{- if $kafkaTlsEnabled }}
        - name: kafka-client-cert
          mountPath: {{ $kafkaMountPath | quote }}
          readOnly: true
{{- end }}
        resources:
          limits:
            cpu: 500m
            memory: 1Gi
          requests:
            cpu: 250m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 9090
          initialDelaySeconds: 180
          periodSeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 9090
          initialDelaySeconds: 120
          periodSeconds: 10
          timeoutSeconds: 5
      volumes:
      - name: runtime-tmp
        emptyDir: {}
{{- if $kafkaTlsEnabled }}
      - name: kafka-client-cert
        secret:
          secretName: {{ $kafkaSecretName | quote }}
          defaultMode: 0400
{{- end }}
---
# DataHub MCE Consumer Service
apiVersion: v1
kind: Service
metadata:
  name: datahub-mce-consumer
  namespace: data-platform
  labels:
    app: datahub-mce-consumer
spec:
  ports:
  - port: 9090
    targetPort: 9090
    name: mce-consumer
  selector:
    app: datahub-mce-consumer
  type: ClusterIP
