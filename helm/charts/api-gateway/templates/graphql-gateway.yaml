---
# GraphQL API Gateway
# Unified API for all platform services

apiVersion: apps/v1
kind: Deployment
metadata:
  name: graphql-gateway
  namespace: data-platform
  labels:
    app: graphql-gateway
spec:
  replicas: 2
  selector:
    matchLabels:
      app: graphql-gateway
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        app: graphql-gateway
        sidecar.istio.io/inject: "false"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      volumes:
      - name: app-workdir
        emptyDir: {}
      containers:
      - name: gateway
        image: node:18-alpine
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        workingDir: /home/node/app
        command:
        - /bin/sh
        - -c
        - |
          mkdir -p /home/node/app
          export HOME=/tmp/node-home
          mkdir -p "$HOME"
          export npm_config_cache=/tmp/npm-cache
          mkdir -p "$npm_config_cache"
          echo "Installing dependencies..."
          npm install --no-save apollo-server graphql @apollo/federation @apollo/gateway --verbose
          echo "Dependencies installed successfully"
          
          cat > server.js << 'EOF'
          const { ApolloServer } = require('apollo-server');
          const { ApolloGateway, RemoteGraphQLDataSource } = require('@apollo/gateway');
          
          class AuthenticatedDataSource extends RemoteGraphQLDataSource {
            willSendRequest({ request, context }) {
              // Add auth headers
              if (context.token) {
                request.http.headers.set('authorization', context.token);
              }
            }
          }
          
          const gateway = new ApolloGateway({
            serviceList: [
              { name: 'datahub', url: 'http://datahub-gms:8080/graphql' },
              { name: 'portal', url: 'http://portal-services:8080/graphql' },
            ],
            buildService({ url }) {
              return new AuthenticatedDataSource({ url });
            },
          });
          
          const server = new ApolloServer({
            gateway,
            context: ({ req }) => ({
              token: req.headers.authorization || '',
            }),
            introspection: true,
            playground: true,
          });
          
          server.listen({ port: 4000 }).then(({ url }) => {
            console.log(`ðŸš€ GraphQL Gateway ready at ${url}`);
          });
          EOF
          
          node server.js
        ports:
        - containerPort: 4000
          name: http
        env:
        - name: NODE_ENV
          value: production
        volumeMounts:
        - name: app-workdir
          mountPath: /home/node/app
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: graphql-gateway
  namespace: data-platform
  labels:
    app: graphql-gateway
spec:
  type: ClusterIP
  ports:
  - port: 4000
    targetPort: 4000
    protocol: TCP
    name: http
  selector:
    app: graphql-gateway

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: graphql-gateway
  namespace: data-platform
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/enable-cors: "true"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - api.254carbon.com
    secretName: graphql-gateway-tls
  rules:
  - host: api.254carbon.com
    http:
      paths:
      - path: /graphql
        pathType: Prefix
        backend:
          service:
            name: graphql-gateway
            port:
              number: 4000
