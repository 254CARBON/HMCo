# Kong API Gateway Deployment
# Complete Kong setup with PostgreSQL backend

---
apiVersion: v1
kind: Namespace
metadata:
  name: kong
  labels:
    name: kong
    istio-injection: enabled

---
# PostgreSQL for Kong
apiVersion: v1
kind: ConfigMap
metadata:
  name: kong-postgres-init
  namespace: kong
data:
  init.sql: |
    CREATE USER kong WITH PASSWORD 'kong123';
    CREATE DATABASE kong OWNER kong;
    GRANT ALL PRIVILEGES ON DATABASE kong TO kong;

---
apiVersion: v1
kind: Secret
metadata:
  name: kong-postgres
  namespace: kong
type: Opaque
stringData:
  postgres-password: "postgres123"
  kong-password: "kong123"

---
apiVersion: v1
kind: Service
metadata:
  name: kong-postgres
  namespace: kong
  labels:
    app: kong-postgres
spec:
  type: ClusterIP
  ports:
  - name: postgres
    port: 5432
    targetPort: 5432
  selector:
    app: kong-postgres

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kong-postgres
  namespace: kong
  labels:
    app: kong-postgres
spec:
  serviceName: kong-postgres
  replicas: 1
  selector:
    matchLabels:
      app: kong-postgres
  template:
    metadata:
      labels:
        app: kong-postgres
      annotations:
        sidecar.istio.io/inject: "false"  # Database doesn't need sidecar
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
        seccompProfile:
          type: RuntimeDefault
      initContainers:
      - name: postgres-permissions
        image: busybox:1.36
        imagePullPolicy: IfNotPresent
        command:
        - sh
        - -c
        - |
          chown -R 999:999 /var/lib/postgresql/data
          chown -R 999:999 /var/run/postgresql
          chown -R 999:999 /tmp
        securityContext:
          runAsUser: 0
          runAsGroup: 0
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data
        - name: run-dir
          mountPath: /var/run/postgresql
        - name: postgres-tmp
          mountPath: /tmp
      containers:
      - name: postgres
        image: postgres:15-alpine
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
          readOnlyRootFilesystem: true
        env:
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kong-postgres
              key: postgres-password
        - name: POSTGRES_DB
          value: postgres
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        ports:
        - name: postgres
          containerPort: 5432
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data
        - name: init-script
          mountPath: /docker-entrypoint-initdb.d
        - name: run-dir
          mountPath: /var/run/postgresql
        - name: postgres-tmp
          mountPath: /tmp
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U postgres
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U postgres
          initialDelaySeconds: 5
          periodSeconds: 10
      volumes:
      - name: init-script
        configMap:
          name: kong-postgres-init
      - name: run-dir
        emptyDir: {}
      - name: postgres-tmp
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: local-path
      resources:
        requests:
          storage: 10Gi

---
# Kong database migrations job
apiVersion: batch/v1
kind: Job
metadata:
  name: kong-migrations
  namespace: kong
  labels:
    app: kong-migrations
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
    argocd.argoproj.io/sync-options: Replace=true
spec:
  template:
    metadata:
      labels:
        app: kong-migrations
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      restartPolicy: OnFailure
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        command:
        - sh
        - -c
        - |
          until pg_isready -h kong-postgres -U postgres; do
            echo "Waiting for postgres..."
            sleep 2
          done
      containers:
      - name: kong-migrations
        image: kong:3.4
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsNonRoot: true
          runAsUser: 1337
          runAsGroup: 1337
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        command: ["kong", "migrations", "bootstrap"]
        env:
        - name: KONG_DATABASE
          value: postgres
        - name: KONG_PG_HOST
          value: kong-postgres
        - name: KONG_PG_PORT
          value: "5432"
        - name: KONG_PG_USER
          value: kong
        - name: KONG_PG_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kong-postgres
              key: kong-password
        - name: KONG_PG_DATABASE
          value: kong

---
# Kong Control Plane (Admin API)
apiVersion: v1
kind: Service
metadata:
  name: kong-admin
  namespace: kong
  labels:
    app: kong
    component: admin
spec:
  type: ClusterIP
  ports:
  - name: kong-admin
    port: 8001
    targetPort: 8001
    protocol: TCP
  - name: kong-admin-ssl
    port: 8444
    targetPort: 8444
    protocol: TCP
  selector:
    app: kong

---
# Kong Proxy Service
apiVersion: v1
kind: Service
metadata:
  name: kong-proxy
  namespace: kong
  labels:
    app: kong
    component: proxy
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
spec:
  type: ClusterIP
  ports:
  - name: kong-proxy
    port: 80
    targetPort: 8000
    protocol: TCP
  - name: kong-proxy-ssl
    port: 443
    targetPort: 8443
    protocol: TCP
  selector:
    app: kong

---
# Kong Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kong
  namespace: kong
  labels:
    app: kong
spec:
  replicas: 2
  selector:
    matchLabels:
      app: kong
  template:
    metadata:
      labels:
        app: kong
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: kong
      securityContext:
        runAsNonRoot: true
        runAsUser: 1337
        runAsGroup: 1337
        fsGroup: 1337
        seccompProfile:
          type: RuntimeDefault
      initContainers:
      - name: kong-permissions
        image: busybox:1.36
        imagePullPolicy: IfNotPresent
        command:
        - sh
        - -c
        - |
          chown -R 1337:1337 /usr/local/kong
          chown -R 1337:1337 /tmp
        securityContext:
          runAsUser: 0
          runAsGroup: 0
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: kong-runtime
          mountPath: /usr/local/kong
        - name: kong-tmp
          mountPath: /tmp
      volumes:
      - name: kong-runtime
        emptyDir: {}
      - name: kong-tmp
        emptyDir: {}
      containers:
      - name: kong
        image: kong:3.4
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1337
          runAsGroup: 1337
          readOnlyRootFilesystem: true
        env:
        # Database
        - name: KONG_DATABASE
          value: postgres
        - name: KONG_PG_HOST
          value: kong-postgres
        - name: KONG_PG_PORT
          value: "5432"
        - name: KONG_PG_USER
          value: kong
        - name: KONG_PG_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kong-postgres
              key: kong-password
        - name: KONG_PG_DATABASE
          value: kong
        
        # Proxy configuration
        - name: KONG_PROXY_ACCESS_LOG
          value: /dev/stdout
        - name: KONG_ADMIN_ACCESS_LOG
          value: /dev/stdout
        - name: KONG_PROXY_ERROR_LOG
          value: /dev/stderr
        - name: KONG_ADMIN_ERROR_LOG
          value: /dev/stderr
        - name: KONG_ADMIN_LISTEN
          value: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
        - name: KONG_PROXY_LISTEN
          value: "0.0.0.0:8000, 0.0.0.0:8443 ssl"
        
        # Performance
        - name: KONG_NGINX_WORKER_PROCESSES
          value: "2"
        - name: KONG_NGINX_HTTP_CLIENT_BODY_BUFFER_SIZE
          value: "16k"
        - name: KONG_NGINX_HTTP_CLIENT_MAX_BODY_SIZE
          value: "100m"
        
        # Features
        - name: KONG_ADMIN_GUI_URL
          value: "http://localhost:8002"
        - name: KONG_PLUGINS
          value: "prometheus,rate-limiting,request-transformer,response-transformer,cors,jwt,key-auth,oauth2,acl,ip-restriction,request-size-limiting,bot-detection,file-log,http-log"
        
        ports:
        - name: proxy
          containerPort: 8000
          protocol: TCP
        - name: proxy-ssl
          containerPort: 8443
          protocol: TCP
        - name: admin
          containerPort: 8001
          protocol: TCP
        - name: admin-ssl
          containerPort: 8444
          protocol: TCP
        
        livenessProbe:
          httpGet:
            path: /status
            port: 8001
          initialDelaySeconds: 30
          periodSeconds: 10
        
        readinessProbe:
          httpGet:
            path: /status
            port: 8001
          initialDelaySeconds: 10
          periodSeconds: 5
        volumeMounts:
        - name: kong-runtime
          mountPath: /usr/local/kong
        - name: kong-tmp
          mountPath: /tmp
        
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 1Gi

---
# ServiceAccount for Kong
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kong
  namespace: kong

---
# ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: kong
  namespace: kong
  labels:
    app: kong
spec:
  selector:
    matchLabels:
      app: kong
  endpoints:
  - port: kong-admin
    path: /metrics
    interval: 30s

---
# Ingress for Kong Admin UI
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kong-admin
  namespace: kong
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
    nginx.ingress.kubernetes.io/limit-connections: "20"
    nginx.ingress.kubernetes.io/limit-rpm: "120"
    nginx.ingress.kubernetes.io/limit-rps: "10"
    portal.254carbon.com/service-id: "kong-admin"
    portal.254carbon.com/service-name: "Kong Admin"
    portal.254carbon.com/service-category: "api-gateway"
    portal.254carbon.com/service-description: "API Gateway administration interface"
    portal.254carbon.com/service-icon: "🦍"
spec:
  ingressClassName: nginx
  rules:
  - host: kong.254carbon.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: kong-admin
            port:
              number: 8001
