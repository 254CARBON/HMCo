# Vault Production Backup & Recovery Automation
# Automated daily backups of Vault PostgreSQL database with retention policy

---
# ServiceAccount for Vault backup operations
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault-backup
  namespace: vault-prod
  labels:
    app: vault-backup

---
# ClusterRole for Vault backup access
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: vault-backup
  labels:
    app: vault-backup
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - create
  - delete
- apiGroups:
  - batch
  resources:
  - jobs
  verbs:
  - get
  - list
  - create
  - delete

---
# ClusterRoleBinding for Vault backup
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vault-backup
  labels:
    app: vault-backup
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vault-backup
subjects:
- kind: ServiceAccount
  name: vault-backup
  namespace: vault-prod

---
# PersistentVolumeClaim for backup storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: vault-backup-storage
  namespace: vault-prod
  labels:
    app: vault-backup
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: local-storage-standard

---
# Daily backup CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: vault-backup-daily
  namespace: vault-prod
  labels:
    app: vault-backup
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM UTC
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: vault-backup
          containers:
          - name: backup
            image: postgres:15
            imagePullPolicy: IfNotPresent
            env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: vault-postgres
                  key: password
            - name: BACKUP_PATH
              value: /backup/vault-$(date +%Y%m%d-%H%M%S).sql
            command:
            - /bin/bash
            - -c
            - |
              set -e
              
              TIMESTAMP=$(date +%Y%m%d-%H%M%S)
              BACKUP_FILE="/backup/vault-${TIMESTAMP}.sql"
              BACKUP_DIR="/backup"
              
              echo "Starting Vault backup at $TIMESTAMP"
              
              # Create backup directory
              mkdir -p $BACKUP_DIR
              
              # Backup PostgreSQL database
              pg_dump \
                -h postgres-shared-service.data-platform.svc.cluster.local \
                -U vault \
                -d vault \
                --format=custom \
                --compress=9 \
                --file=$BACKUP_FILE
              
              if [ $? -eq 0 ]; then
                echo "✓ Backup successful: $BACKUP_FILE ($(du -h $BACKUP_FILE | cut -f1))"
                
                # List recent backups
                echo "Recent backups:"
                ls -lh $BACKUP_DIR/*.sql 2>/dev/null | tail -5
              else
                echo "✗ Backup failed!"
                exit 1
              fi
            volumeMounts:
            - name: backup-storage
              mountPath: /backup
            resources:
              requests:
                cpu: 500m
                memory: 512Mi
              limits:
                cpu: 1000m
                memory: 1Gi
          volumes:
          - name: backup-storage
            persistentVolumeClaim:
              claimName: vault-backup-storage
          restartPolicy: OnFailure

---
# Weekly backup CronJob (kept longer)
apiVersion: batch/v1
kind: CronJob
metadata:
  name: vault-backup-weekly
  namespace: vault-prod
  labels:
    app: vault-backup
spec:
  schedule: "0 3 * * 0"  # Weekly on Sunday at 3 AM UTC
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: vault-backup
          containers:
          - name: backup
            image: postgres:15
            imagePullPolicy: IfNotPresent
            env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: vault-postgres
                  key: password
            command:
            - /bin/bash
            - -c
            - |
              set -e
              
              TIMESTAMP=$(date +%Y%m%d-%H%M%S)
              BACKUP_FILE="/backup/weekly/vault-${TIMESTAMP}.sql"
              BACKUP_DIR="/backup/weekly"
              
              echo "Starting weekly Vault backup at $TIMESTAMP"
              
              # Create backup directory
              mkdir -p $BACKUP_DIR
              
              # Backup PostgreSQL database
              pg_dump \
                -h postgres-shared-service.data-platform.svc.cluster.local \
                -U vault \
                -d vault \
                --format=custom \
                --compress=9 \
                --file=$BACKUP_FILE
              
              if [ $? -eq 0 ]; then
                echo "✓ Weekly backup successful: $BACKUP_FILE ($(du -h $BACKUP_FILE | cut -f1))"
              else
                echo "✗ Weekly backup failed!"
                exit 1
              fi
            volumeMounts:
            - name: backup-storage
              mountPath: /backup
            resources:
              requests:
                cpu: 500m
                memory: 512Mi
              limits:
                cpu: 1000m
                memory: 1Gi
          volumes:
          - name: backup-storage
            persistentVolumeClaim:
              claimName: vault-backup-storage
          restartPolicy: OnFailure

---
# Backup retention cleanup CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: vault-backup-cleanup
  namespace: vault-prod
  labels:
    app: vault-backup
spec:
  schedule: "0 4 * * *"  # Daily at 4 AM UTC
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: vault-backup
          containers:
          - name: cleanup
            image: busybox:latest
            imagePullPolicy: IfNotPresent
            command:
            - /bin/sh
            - -c
            - |
              set -e
              
              BACKUP_DIR="/backup"
              DAILY_RETENTION_DAYS=30
              WEEKLY_RETENTION_DAYS=90
              
              echo "Starting backup cleanup"
              
              # Clean daily backups older than 30 days
              echo "Removing daily backups older than $DAILY_RETENTION_DAYS days..."
              find $BACKUP_DIR -maxdepth 1 -name "vault-*.sql" -type f -mtime +$DAILY_RETENTION_DAYS -delete
              
              # Clean weekly backups older than 90 days
              echo "Removing weekly backups older than $WEEKLY_RETENTION_DAYS days..."
              find $BACKUP_DIR/weekly -name "vault-*.sql" -type f -mtime +$WEEKLY_RETENTION_DAYS -delete 2>/dev/null || true
              
              # Report remaining backups
              echo "Current backups:"
              du -sh $BACKUP_DIR 2>/dev/null || true
              find $BACKUP_DIR -type f -name "vault-*.sql" | wc -l | xargs echo "Total backup files:"
            volumeMounts:
            - name: backup-storage
              mountPath: /backup
            resources:
              requests:
                cpu: 100m
                memory: 128Mi
              limits:
                cpu: 200m
                memory: 256Mi
          volumes:
          - name: backup-storage
            persistentVolumeClaim:
              claimName: vault-backup-storage
          restartPolicy: OnFailure

---
# One-time restore Job (manually triggered)
# kubectl apply -f this resource to restore
apiVersion: batch/v1
kind: Job
metadata:
  name: vault-backup-restore
  namespace: vault-prod
  labels:
    app: vault-backup
spec:
  backoffLimit: 1
  template:
    spec:
      serviceAccountName: vault-backup
      containers:
      - name: restore
        image: postgres:15
        imagePullPolicy: IfNotPresent
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: vault-postgres
              key: password
        # BACKUP_FILE must be specified at runtime
        # e.g., kubectl set env job/vault-backup-restore BACKUP_FILE=/backup/vault-20251019-020000.sql
        command:
        - /bin/bash
        - -c
        - |
          set -e
          
          BACKUP_FILE="${BACKUP_FILE:-}"
          
          if [ -z "$BACKUP_FILE" ]; then
            echo "ERROR: BACKUP_FILE environment variable not set"
            echo "Usage: kubectl set env job/vault-backup-restore BACKUP_FILE=/backup/vault-YYYYMMDD-HHMMSS.sql"
            exit 1
          fi
          
          if [ ! -f "$BACKUP_FILE" ]; then
            echo "ERROR: Backup file not found: $BACKUP_FILE"
            exit 1
          fi
          
          echo "Starting restore from $BACKUP_FILE"
          
          # Drop existing vault database
          psql \
            -h postgres-shared-service.data-platform.svc.cluster.local \
            -U vault \
            -c "DROP DATABASE IF EXISTS vault;" 2>/dev/null || true
          
          # Create new vault database
          psql \
            -h postgres-shared-service.data-platform.svc.cluster.local \
            -U vault \
            -c "CREATE DATABASE vault OWNER vault;"
          
          # Restore from backup
          pg_restore \
            -h postgres-shared-service.data-platform.svc.cluster.local \
            -U vault \
            -d vault \
            --no-privileges \
            --single-transaction \
            "$BACKUP_FILE"
          
          if [ $? -eq 0 ]; then
            echo "✓ Restore successful from $BACKUP_FILE"
          else
            echo "✗ Restore failed!"
            exit 1
          fi
        volumeMounts:
        - name: backup-storage
          mountPath: /backup
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 1Gi
      volumes:
      - name: backup-storage
        persistentVolumeClaim:
          claimName: vault-backup-storage
      restartPolicy: Never
