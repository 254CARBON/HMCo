{{- $globalVals := default (dict) .Values.global -}}
{{- $globalSso := default (dict) (get $globalVals "sso") -}}
{{- $grafanaVals := default (dict) .Values.grafana -}}
{{- $grafanaSso := default (dict) (get $grafanaVals "sso") -}}
{{- $defaultScopes := list "openid" "profile" "email" -}}
{{- $scopesCandidate := default (get $globalSso "scopes") (get $grafanaSso "scopes") -}}
{{- $effectiveScopes := default $defaultScopes $scopesCandidate -}}
{{- $claimMappings := default (dict) (get $globalSso "claimMappings") -}}
{{- $groupsClaim := default "groups" (get $claimMappings "groups") -}}
{{- $emailClaim := default "email" (get $claimMappings "email") -}}
{{- $nameClaim := default "name" (get $claimMappings "name") -}}
{{- $groupsConfig := default (dict) (get $globalSso "groups") -}}
{{- $adminGroup := default "platform-admins" (get $groupsConfig "admin") -}}
{{- $editorGroup := default "data-engineers" (get $groupsConfig "editor") -}}
{{- $viewerGroup := default "data-analysts" (get $groupsConfig "viewer") -}}
{{- $defaultRolePath := printf "contains(%s[*], '%s') && 'Admin' || contains(%s[*], '%s') && 'Editor' || 'Viewer'" $groupsClaim $adminGroup $groupsClaim $editorGroup -}}
{{- $roleAttributePath := default $defaultRolePath (get $grafanaSso "roleAttributePath") -}}
{{- $authorizationUrl := default (get $globalSso "authorizationUrl") (get $grafanaSso "authorizationUrl") -}}
{{- $tokenUrl := default (get $globalSso "tokenUrl") (get $grafanaSso "tokenUrl") -}}
{{- $userInfoUrl := default (get $globalSso "userInfoUrl") (get $grafanaSso "userInfoUrl") -}}
{{- $logoutUrl := default (get $globalSso "logoutUrl") (get $grafanaSso "logoutUrl") -}}
{{- $issuerUrl := default (get $globalSso "issuerUrl") (get $grafanaSso "issuerUrl") -}}
{{- $clientSecretCfg := default (dict) (get $grafanaSso "clientSecret") -}}
{{- $hostname := default "grafana.254carbon.com" (get $grafanaVals "hostname") -}}
# Grafana deployment with pre-configured dashboards
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
    component: visualization
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        component: visualization
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:10.2.0
        ports:
        - containerPort: 3000
          name: grafana
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-secret
              key: admin-password
        - name: GF_USERS_ALLOW_SIGN_UP
          value: {{ ternary "true" "false" (default false (get $grafanaSso "enabled")) | quote }}
        - name: GF_INSTALL_PLUGINS
          value: "grafana-piechart-panel,grafana-worldmap-panel"
        - name: GF_LOG_LEVEL
          value: "info"
        - name: GF_LOG_MODE
          value: "console"
        - name: GF_SERVER_DOMAIN
          value: {{ $hostname | quote }}
        - name: GF_SERVER_ROOT_URL
          value: {{ printf "https://%s/" $hostname | quote }}
        - name: GF_AUTH_DISABLE_LOGIN_FORM
          value: {{ ternary "false" "true" (default false (get $grafanaSso "enabled")) | quote }}
        - name: GF_AUTH_GENERIC_OAUTH_ENABLED
          value: {{ ternary "true" "false" (default false (get $grafanaSso "enabled")) | quote }}
        - name: GF_AUTH_GENERIC_OAUTH_NAME
          value: {{ default "OIDC" (get $grafanaSso "providerName") | quote }}
        - name: GF_AUTH_GENERIC_OAUTH_SCOPES
          value: {{ join " " $effectiveScopes | quote }}
        - name: GF_AUTH_GENERIC_OAUTH_EMAIL_ATTRIBUTE_PATH
          value: {{ printf "%s" $emailClaim | quote }}
        - name: GF_AUTH_GENERIC_OAUTH_LOGIN_ATTRIBUTE_PATH
          value: {{ printf "%s" $emailClaim | quote }}
        - name: GF_AUTH_GENERIC_OAUTH_NAME_ATTRIBUTE_PATH
          value: {{ printf "%s" $nameClaim | quote }}
        - name: GF_AUTH_GENERIC_OAUTH_GROUPS_ATTRIBUTE_PATH
          value: {{ printf "%s" $groupsClaim | quote }}
        - name: GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH
          value: {{ $roleAttributePath | quote }}
        - name: GF_AUTH_GENERIC_OAUTH_USE_PKCE
          value: {{ ternary "true" "false" (default true (get $grafanaSso "usePkce")) | quote }}
        - name: GF_AUTH_OAUTH_AUTO_LOGIN
          value: {{ ternary "true" "false" (and (default false (get $grafanaSso "enabled")) (default true (get $grafanaSso "autoLogin"))) | quote }}
        - name: GF_AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP
          value: {{ ternary "true" "false" (default true (get $grafanaSso "allowSignUp")) | quote }}
        - name: GF_AUTH_GENERIC_OAUTH_AUTH_URL
          value: {{ default "" $authorizationUrl | quote }}
        - name: GF_AUTH_GENERIC_OAUTH_TOKEN_URL
          value: {{ default "" $tokenUrl | quote }}
        - name: GF_AUTH_GENERIC_OAUTH_API_URL
          value: {{ default "" $userInfoUrl | quote }}
        - name: GF_AUTH_GENERIC_OAUTH_LOGOUT_URL
          value: {{ default "" $logoutUrl | quote }}
        - name: GF_AUTH_GENERIC_OAUTH_ISSUER
          value: {{ default "" $issuerUrl | quote }}
        - name: GF_AUTH_GENERIC_OAUTH_CLIENT_ID
          value: {{ default "" (get $grafanaSso "clientId") | quote }}
{{- if and (default false (get $grafanaSso "enabled")) (get $clientSecretCfg "existingSecret") }}
        - name: GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ get $clientSecretCfg "existingSecret" | quote }}
              key: {{ default "client-secret" (get $clientSecretCfg "key") | quote }}
{{- end }}
        volumeMounts:
        - name: grafana-data
          mountPath: /var/lib/grafana
        - name: grafana-config
          mountPath: /etc/grafana
        - name: grafana-dashboards
          mountPath: /var/lib/grafana/dashboards
        - name: grafana-provisioning
          mountPath: /etc/grafana/provisioning
        resources:
          limits:
            memory: "2Gi"
            cpu: "1000m"
          requests:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: grafana-data
        persistentVolumeClaim:
          claimName: grafana-data
      - name: grafana-config
        configMap:
          name: grafana-config
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
      - name: grafana-provisioning
        configMap:
          name: grafana-provisioning
---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
spec:
  ports:
  - port: 3000
    targetPort: 3000
    name: grafana
  selector:
    app: grafana
  type: ClusterIP
---
# Persistent Volume Claim for Grafana data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-data
  namespace: monitoring
  labels:
    app: grafana
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: local-path
---
# Secret for Grafana admin password
apiVersion: v1
kind: Secret
metadata:
  name: grafana-secret
  namespace: monitoring
  labels:
    app: grafana
type: Opaque
data:
  # Base64 encoded "datahub_admin_password"
  admin-password: ZGF0YWh1Yl9hZG1pbl9wYXNzd29yZA==
---
# ConfigMap for Grafana configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: monitoring
  labels:
    app: grafana
data:
  grafana.ini: |
    [server]
    http_port = 3000
    root_url = %(protocol)s://%(domain)s:%(http_port)s/

    [database]
    type = sqlite3
    path = /var/lib/grafana/grafana.db

    [session]
    provider = file
    provider_config = sessions
    cookie_secure = false
    session_life_time = 86400

    [analytics]
    check_for_updates = false
    reporting_enabled = false

    [security]
    admin_user = admin
    allow_embedding = true
    disable_gravatar = true

    [users]
    allow_sign_up = {{ ternary "true" "false" (default false (get $grafanaSso "enabled")) }}
    auto_assign_org = true
    auto_assign_org_role = Viewer

    [auth.anonymous]
    enabled = false

    [auth]
    disable_login_form = {{ ternary "false" "true" (default false (get $grafanaSso "enabled")) }}
    oauth_auto_login = {{ ternary "true" "false" (and (default false (get $grafanaSso "enabled")) (default true (get $grafanaSso "autoLogin"))) }}

    [auth.basic]
    enabled = false

    [auth.proxy]
    enabled = {{ ternary "false" "true" (default false (get $grafanaSso "enabled")) }}
{{- if not (default false (get $grafanaSso "enabled")) }}
    header_name = X-WEBAUTH-USER
    auto_sign_up = true
    # Map additional headers if present from ingress
    headers = Email:X-WEBAUTH-EMAIL; Name:X-WEBAUTH-USER; Login:X-WEBAUTH-USER; Groups:X-WEBAUTH-GROUPS
{{- end }}

    [auth.generic_oauth]
    enabled = {{ ternary "true" "false" (default false (get $grafanaSso "enabled")) }}
    name = {{ default "OIDC" (get $grafanaSso "providerName") | quote }}
    allow_sign_up = {{ ternary "true" "false" (default true (get $grafanaSso "allowSignUp")) }}
    use_pkce = {{ ternary "true" "false" (default true (get $grafanaSso "usePkce")) }}

    [smtp]
    enabled = false

---
# ConfigMap for Grafana dashboards
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: monitoring
  labels:
    app: grafana
data:
  data-platform-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Data Platform Overview",
        "tags": ["data-platform"],
        "style": "dark",
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Service Status",
            "type": "stat",
            "targets": [
              {
                "expr": "up{job=\"datahub-services\"}",
                "refId": "A"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {
                      "color": "red",
                      "value": 0
                    },
                    {
                      "color": "green",
                      "value": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 2,
            "title": "Resource Usage",
            "type": "gauge",
            "targets": [
              {
                "expr": "100 - (avg by (instance) (rate(node_cpu_seconds_total{mode=\"idle\"}[5m])) * 100)",
                "refId": "A"
              }
            ]
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "timepicker": {},
        "templating": {
          "list": []
        },
        "annotations": {
          "list": []
        },
        "refresh": "30s",
        "schemaVersion": 16,
        "version": 0,
        "links": []
      }
    }

---
# ConfigMap for Grafana provisioning
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-provisioning
  namespace: monitoring
  labels:
    app: grafana
data:
  datasources.yml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus:9090
      isDefault: true
      editable: true
    - name: Loki
      type: loki
      access: proxy
      url: http://loki:3100
      isDefault: false
      editable: true

  dashboards.yml: |
    apiVersion: 1
    providers:
    - name: 'Data Platform'
      orgId: 1
      folder: 'Data Platform'
      type: file
      disableDeletion: false
      updateIntervalSeconds: 30
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards

  dashboards-provisioning.yml: |
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      updateIntervalSeconds: 30
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards
