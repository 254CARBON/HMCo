# RBAC Configuration - Principle of Least Privilege
# Each service gets minimal required permissions

---
# Data Platform namespace - ServiceAccounts
apiVersion: v1
kind: ServiceAccount
metadata:
  name: platform-app
  namespace: data-platform
  labels:
    app: data-platform

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault-client
  namespace: data-platform
  labels:
    app: vault-client

---
# Monitoring namespace - ServiceAccounts
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app: prometheus

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana

---
# Vault-prod namespace - ServiceAccounts
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault
  namespace: vault-prod
  labels:
    app: vault

---
# Role: Read pod metrics (for Prometheus)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-metrics
  labels:
    rbac: prometheus
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - nodes
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch

---
# RoleBinding: Prometheus to read metrics
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-metrics
  labels:
    rbac: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-metrics
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: monitoring

---
# Role: Read only access to pod logs for Grafana
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: grafana-read-only
  labels:
    rbac: grafana
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - nodes
  - endpoints
  verbs:
  - get
  - list
- apiGroups:
  - ""
  resources:
  - pods/log
  verbs:
  - get

---
# RoleBinding: Grafana read-only
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: grafana-read-only
  labels:
    rbac: grafana
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: grafana-read-only
subjects:
- kind: ServiceAccount
  name: grafana
  namespace: monitoring

---
# Role: Vault - manage pod configmaps
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: vault-pod-reader
  namespace: vault-prod
  labels:
    rbac: vault
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - pods/log
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list

---
# RoleBinding: Vault pod reader
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: vault-pod-reader
  namespace: vault-prod
  labels:
    rbac: vault
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: vault-pod-reader
subjects:
- kind: ServiceAccount
  name: vault
  namespace: vault-prod

---
# Role: Platform applications - read config and secrets
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: platform-read-config
  namespace: data-platform
  labels:
    rbac: platform
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
- apiGroups:
  - ""
  resources:
  - secrets
  # Do NOT give pods direct secret access; use Vault instead
  verbs:
  - get
  - list

---
# RoleBinding: Platform apps read config
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: platform-read-config
  namespace: data-platform
  labels:
    rbac: platform
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: platform-read-config
subjects:
- kind: ServiceAccount
  name: platform-app
  namespace: data-platform
- kind: ServiceAccount
  name: vault-client
  namespace: data-platform

---
# Audit Log Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: audit-policy
  namespace: kube-system
data:
  audit-policy.yaml: |
    apiVersion: audit.k8s.io/v1
    kind: Policy
    rules:
    # Log all requests at Metadata level
    - level: Metadata
      omitStages:
      - RequestReceived
    # Log pod exec at RequestResponse level
    - level: RequestResponse
      verbs: ["create"]
      resources:
      - group: ""
        resources: ["pods/exec", "pods/attach"]
    # Log secret access at RequestResponse level
    - level: RequestResponse
      resources:
      - group: ""
        resources: ["secrets"]
      namespaces: ["vault-prod", "cert-manager"]
    # Log RBAC changes
    - level: RequestResponse
      verbs: ["create", "update", "patch", "delete"]
      resources:
      - group: rbac.authorization.k8s.io
        resources: ["clusterroles", "clusterrolebindings", "roles", "rolebindings"]
    # Log all requests at Metadata level
    - level: Metadata

---
# Pod Security Standards namespace labels
apiVersion: v1
kind: Namespace
metadata:
  name: data-platform
  labels:
    pod-security.kubernetes.io/enforce: baseline
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted

---
apiVersion: v1
kind: Namespace
metadata:
  name: vault-prod
  labels:
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted

---
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
  labels:
    pod-security.kubernetes.io/enforce: baseline
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted

---
# Deny default service account usage
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: deny-default-serviceaccount
  namespace: data-platform
spec:
  podSelector:
    matchLabels:
      serviceaccount: default
  policyTypes:
  - Ingress
  - Egress
